{"version":3,"sources":["state/transactions/hooks.tsx","components/CardNav/index.tsx","components/PageHeader/SlippageToleranceSetting.tsx","components/PageHeader/TransactionDeadlineSetting.tsx","components/PageHeader/ExpertModeSetting.tsx","components/PageHeader/SettingsModal.tsx","components/PageHeader/RecentTransactionsModal.tsx","components/PageHeader/index.tsx","hooks/useGetApiPrices.ts","hooks/useBalanceFromAddress.ts","hooks/useCreateLp.ts","views/Zapin/index.tsx"],"names":["useTransactionAdder","useActiveWeb3React","chainId","account","dispatch","useDispatch","useCallback","response","summary","approval","hash","Error","addTransaction","from","useAllTransactions","state","useSelector","s","transactions","isTransactionRecent","tx","Date","getTime","addedTime","useHasPendingApproval","tokenAddress","spender","allTransactions","useMemo","Object","keys","some","receipt","StyledNav","styled","div","TabContainer","TabItem","Link","props","active","theme","colors","tertiary","textSubtle","Bridge","a","Nav","activeIndex","React","useState","activeTab","t","useTranslation","id","to","isMobile","href","target","StyledSlippageToleranceSettings","Option","Options","mediaQueries","sm","Label","predefinedValues","label","value","SlippageToleranceSettings","useUserSlippageTolerance","userSlippageTolerance","setUserslippageTolerance","setValue","error","setError","useEffect","rawValue","Number","isNaN","style","fontWeight","QuestionHelper","text","mb","mr","map","predefinedValue","variant","onClick","alignItems","type","scale","step","min","placeholder","onChange","evt","inputValue","parseFloat","isWarning","fontSize","mt","color","StyledTransactionDeadlineSetting","Field","Input","Text","TransactionDeadlineSetting","useUserDeadline","deadline","setDeadline","parseInt","Wrapper","ExpertModeSetting","useExpertModeManager","isExpertMode","toggleSetExpertMode","checked","defaultOnDismiss","SettingsModal","onDismiss","title","SlippageToleranceSetting","newTransactionsFirst","b","RecentTransactionsModal","sortedRecentTransactions","values","filter","sort","justifyContent","flexDirection","bold","length","sortedRecentTransaction","status","icon","Loader","getRowStatus","getSnowtraceLink","HistoryIcon","width","height","viewBox","d","fill","StyledPageHeader","borderColor","Details","PageHeader","description","isShowSetting","children","useModal","onPresentSettings","onPresentRecentTransactions","useGetApiPrices","prices","setPrices","useWeb3React","usdcCoreContract","useLpTokenFromSymbol","getLpPrice","contract","baseTokenSymbol","price","lpPrice","BigNumber","token0","getReserves","result","totalSupply","addresses","tokens","find","symbol","toLowerCase","includes","address","_reserve0","_hex","times","_reserve1","toString","getPrices","usdcReserve","coreReserve","usdcCorePrice","wcore","interval","setInterval","clearInterval","web3","getWeb3NoAccount","useBalanceFromAddress","tokenBalance","setTokenBalance","tokenContract","useTokenContract","getCoreBalance","eth","getBalance","coreBalance","getTokenInfo","console","res","balanceOf","useCreateLpToken","params","pending","setPending","zapContract","useZapContract","onCreateLp","option","_fromTokenAddress","payableAmount","zapIn","_amountIn","_lpAddress","_token0Path","_token1Path","_minPoolTokens","_token0RouterAddress","_token1RouterAddress","_LPRouterAddress","CreateLpSelect","invertedContrast","input","shadows","inset","CoinPair","Zapin","TranslateString","useI18n","lpTokenSymbol","setLpTokenSymbol","baseTokenBalance","setBaseTokenBalance","lpTokenBalance","lpContracts","archerswap","lpAddresses","routerAddress","receiveAmount","token0Path","token1Path","dp","toNumber","handleCreateLp","CardNav","AppBody","gap","Dropdown","Toggle","className","src","alt","Menu","Item","e","display","justify","padding","clickable","borderRadius","asset1","asset2","lpSymbol","key","Row","align","disabled","isGreaterThan","Spinner","animation","size","marginRight"],"mappings":"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","file":"static/js/41.1b22b890.chunk.js","sourcesContent":["import { TransactionResponse } from '@ethersproject/providers'\r\nimport { useCallback, useMemo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { useActiveWeb3React } from '../../hooks'\r\nimport { AppDispatch, AppState } from '../index'\r\nimport { addTransaction } from './actions'\r\nimport { TransactionDetails } from './reducer'\r\n\r\n// helper that can take a ethers library transaction response and add it to the list of transactions\r\nexport function useTransactionAdder(): (\r\n  response: TransactionResponse,\r\n  customData?: { summary?: string; approval?: { tokenAddress: string; spender: string } },\r\n) => void {\r\n  const { chainId, account } = useActiveWeb3React()\r\n  const dispatch = useDispatch<AppDispatch>()\r\n\r\n  return useCallback(\r\n    (\r\n      response: TransactionResponse,\r\n      { summary, approval }: { summary?: string; approval?: { tokenAddress: string; spender: string } } = {},\r\n    ) => {\r\n      if (!account) return\r\n      if (!chainId) return\r\n\r\n      const { hash } = response\r\n      if (!hash) {\r\n        throw Error('No transaction hash found.')\r\n      }\r\n      dispatch(addTransaction({ hash, from: account, chainId, approval, summary }))\r\n    },\r\n    [dispatch, chainId, account],\r\n  )\r\n}\r\n\r\n// returns all the transactions for the current chain\r\nexport function useAllTransactions(): { [txHash: string]: TransactionDetails } {\r\n  const { chainId } = useActiveWeb3React()\r\n\r\n  const state = useSelector<AppState, AppState['transactions']>((s) => s.transactions)\r\n\r\n  return chainId ? state[chainId] ?? {} : {}\r\n}\r\n\r\nexport function useIsTransactionPending(transactionHash?: string): boolean {\r\n  const transactions = useAllTransactions()\r\n\r\n  if (!transactionHash || !transactions[transactionHash]) return false\r\n\r\n  return !transactions[transactionHash].receipt\r\n}\r\n\r\n/**\r\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\r\n * @param tx to check for recency\r\n */\r\nexport function isTransactionRecent(tx: TransactionDetails): boolean {\r\n  return new Date().getTime() - tx.addedTime < 86_400_000\r\n}\r\n\r\n// returns whether a token has a pending approval transaction\r\nexport function useHasPendingApproval(tokenAddress: string | undefined, spender: string | undefined): boolean {\r\n  const allTransactions = useAllTransactions()\r\n  return useMemo(\r\n    () =>\r\n      typeof tokenAddress === 'string' &&\r\n      typeof spender === 'string' &&\r\n      Object.keys(allTransactions).some((hash) => {\r\n        const tx = allTransactions[hash]\r\n        if (!tx) return false\r\n        if (tx.receipt) {\r\n          return false\r\n        }\r\n        const { approval } = tx\r\n        if (!approval) return false\r\n        return approval.spender === spender && approval.tokenAddress === tokenAddress && isTransactionRecent(tx)\r\n      }),\r\n    [allTransactions, spender, tokenAddress],\r\n  )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Link } from 'react-router-dom'\r\n// import { ButtonMenu, ButtonMenuItem } from 'archerswap-uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { isMobile } from 'react-device-detect'\r\n\r\nconst StyledNav = styled.div`\r\n  margin-bottom: 40px;\r\n`\r\nconst TabContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n`\r\nconst TabItem = styled(Link)<{ active: boolean }>`\r\n  display: flex;\r\n  padding: 11px 35px;\r\n  // background: ${(props) => (props.active ? '#EAAA08' : props.theme.colors.tertiary)};\r\n  background: ${(props) => props.theme.colors.tertiary};\r\n  border-radius: 32px;\r\n  font-weight: 600;\r\n  font-size: 18px;\r\n  line-height: 24px;\r\n  text-align: center;\r\n  // color: ${(props) => (props.active ? '#ffffff' : props.theme.colors.textSubtle)};\r\n  color: ${(props) => (props.active ? '#EAAA08' : props.theme.colors.textSubtle)};\r\n  z-index: ${(props) => (props.active ? '1' : '0')};\r\n  margin: 32px -18px;\r\n  cursor: pointer;\r\n\r\n  // &:hover {\r\n  //   color: ${(props) => (props.active ? '#ffffff' : props.theme.colors.textSubtle)};\r\n  // }\r\n  @media (max-width: 768px) {\r\n    padding: 11px 35px;\r\n    margin: 40px -18px;\r\n    border-radius: 28px !important;\r\n    font-size: 16px;\r\n  }\r\n`\r\n\r\nconst Bridge = styled.a<{ active: boolean }>`\r\n  display: flex;\r\n  padding: 11px 35px;\r\n  // background: ${(props) => (props.active ? '#EAAA08' : props.theme.colors.tertiary)};\r\n  background: ${(props) => props.theme.colors.tertiary};\r\n  border-radius: 32px;\r\n  font-weight: 600;\r\n  font-size: 18px;\r\n  line-height: 24px;\r\n  text-align: center;\r\n  // color: ${(props) => (props.active ? '#ffffff' : props.theme.colors.textSubtle)};\r\n  color: ${(props) => (props.active ? '#EAAA08' : props.theme.colors.textSubtle)};\r\n  z-index: ${(props) => (props.active ? '1' : '0')};\r\n  margin: 32px -18px;\r\n  cursor: pointer;\r\n\r\n  // &:hover {\r\n  //   color: ${(props) => (props.active ? '#ffffff' : props.theme.colors.textSubtle)};\r\n  // }\r\n  @media (max-width: 768px) {\r\n    padding: 11px 35px;\r\n    margin: 40px -18px;\r\n    border-radius: 28px !important;\r\n    font-size: 16px;\r\n  }\r\n`\r\n\r\nfunction Nav({ activeIndex = 0 }: { activeIndex?: number }) {\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n  const [activeTab, setActiveTab] = React.useState(activeIndex)\r\n  const { t } = useTranslation()\r\n  return (\r\n    <StyledNav>\r\n      <TabContainer>\r\n        <TabItem active={activeTab === 0} id=\"swap-nav-link\" to=\"/swap\">\r\n          {t('Swap')}\r\n        </TabItem>\r\n        <TabItem active={activeTab === 1} id=\"pool-nav-link\" to=\"/pool\">\r\n          {t('Liquidity')}\r\n        </TabItem>\r\n        <TabItem active={activeTab === 2} id=\"TabItem-nav-link\" to=\"/cross-swap\">\r\n          {isMobile ? t('Cross') : t('Cross Swap')}\r\n        </TabItem>\r\n        <Bridge active={activeTab === 3} id=\"bridge-nav-link\" href=\"https://bridge.coredao.org/bridge\" target=\"_blank\">\r\n          {t('Bridge')}\r\n        </Bridge>\r\n        {/* <ButtonMenuItem id=\"zapin-nav-link\" to=\"/zap\" as={Link} style={{ borderRadius: '30px' }}>\r\n          {TranslateString(92, 'Zap')}\r\n        </ButtonMenuItem> */}\r\n      </TabContainer>\r\n    </StyledNav>\r\n  )\r\n}\r\n\r\nexport default Nav\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, Flex, Input, Text } from 'archerswap-uikit'\r\nimport { useUserSlippageTolerance } from 'state/user/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport QuestionHelper from '../QuestionHelper'\r\n\r\nconst MAX_SLIPPAGE = 5000\r\nconst RISKY_SLIPPAGE_LOW = 50\r\nconst RISKY_SLIPPAGE_HIGH = 500\r\n\r\nconst StyledSlippageToleranceSettings = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Option = styled.div`\r\n  padding: 0 4px;\r\n`\r\n\r\nconst Options = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${Option}:first-child {\r\n    padding-left: 0;\r\n  }\r\n\r\n  ${Option}:last-child {\r\n    padding-right: 0;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n  }\r\n`\r\n\r\nconst Label = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst predefinedValues = [\r\n  { label: '0.1%', value: 0.1 },\r\n  { label: '0.5%', value: 0.5 },\r\n  { label: '1%', value: 1 },\r\n]\r\n\r\nconst SlippageToleranceSettings = () => {\r\n  const { t } = useTranslation()\r\n  const [userSlippageTolerance, setUserslippageTolerance] = useUserSlippageTolerance()\r\n  const [value, setValue] = useState(userSlippageTolerance / 100)\r\n  const [error, setError] = useState<string | null>(null)\r\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value: inputValue } = evt.target\r\n    setValue(parseFloat(inputValue))\r\n  }\r\n\r\n  // Updates local storage if value is valid\r\n  useEffect(() => {\r\n    try {\r\n      const rawValue = value * 100\r\n      if (!Number.isNaN(rawValue) && rawValue > 0 && rawValue < MAX_SLIPPAGE) {\r\n        setUserslippageTolerance(rawValue)\r\n        setError(null)\r\n      } else {\r\n        setError(t('Enter a valid slippage percentage'))\r\n      }\r\n    } catch {\r\n      setError(t('Enter a valid slippage percentage'))\r\n    }\r\n  }, [value, setError, setUserslippageTolerance, t])\r\n\r\n  // Notify user if slippage is risky\r\n  useEffect(() => {\r\n    if (userSlippageTolerance < RISKY_SLIPPAGE_LOW) {\r\n      setError(t('Your transaction may fail'))\r\n    } else if (userSlippageTolerance > RISKY_SLIPPAGE_HIGH) {\r\n      setError(t('Your transaction may be frontrun'))\r\n    }\r\n  }, [userSlippageTolerance, setError, t])\r\n\r\n  return (\r\n    <StyledSlippageToleranceSettings>\r\n      <Label>\r\n        <Text style={{ fontWeight: 600 }}>{t('Slippage tolerance')}</Text>\r\n        <QuestionHelper\r\n          text={t('Your transaction will revert if the price changes unfavorably by more than this percentage.')}\r\n        />\r\n      </Label>\r\n      <Options>\r\n        <Flex mb={['8px', 0]} mr={[0, '8px']}>\r\n          {predefinedValues.map(({ label, value: predefinedValue }) => {\r\n            const handleClick = () => setValue(predefinedValue)\r\n\r\n            return (\r\n              <Option key={predefinedValue}>\r\n                <Button variant={value === predefinedValue ? 'primary' : 'tertiary'} onClick={handleClick}>\r\n                  {label}\r\n                </Button>\r\n              </Option>\r\n            )\r\n          })}\r\n        </Flex>\r\n        <Flex alignItems=\"center\">\r\n          <Option>\r\n            <Input\r\n              type=\"number\"\r\n              scale=\"lg\"\r\n              step={0.1}\r\n              min={0.1}\r\n              placeholder=\"5%\"\r\n              value={value}\r\n              onChange={handleChange}\r\n              isWarning={error !== null}\r\n            />\r\n          </Option>\r\n          <Option>\r\n            <Text fontSize=\"18px\">%</Text>\r\n          </Option>\r\n        </Flex>\r\n      </Options>\r\n      {error && (\r\n        <Text mt=\"8px\" color=\"failure\">\r\n          {error}\r\n        </Text>\r\n      )}\r\n    </StyledSlippageToleranceSettings>\r\n  )\r\n}\r\n\r\nexport default SlippageToleranceSettings\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Input, Text } from 'archerswap-uikit'\r\nimport { useUserDeadline } from 'state/user/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport QuestionHelper from '../QuestionHelper'\r\n\r\nconst StyledTransactionDeadlineSetting = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst Field = styled.div`\r\n  align-items: center;\r\n  display: inline-flex;\r\n\r\n  & > ${Input} {\r\n    max-width: 100px;\r\n  }\r\n\r\n  & > ${Text} {\r\n    font-size: 14px;\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst TransactionDeadlineSetting = () => {\r\n  const { t } = useTranslation()\r\n  const [deadline, setDeadline] = useUserDeadline()\r\n  const [value, setValue] = useState(deadline / 60) // deadline in minutes\r\n  const [error, setError] = useState<string | null>(null)\r\n\r\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value: inputValue } = evt.target\r\n    setValue(parseInt(inputValue, 10))\r\n  }\r\n\r\n  // Updates local storage if value is valid\r\n  useEffect(() => {\r\n    try {\r\n      const rawValue = value * 60\r\n      if (!Number.isNaN(rawValue) && rawValue > 0) {\r\n        setDeadline(rawValue)\r\n        setError(null)\r\n      } else {\r\n        setError(t('Enter a valid deadline'))\r\n      }\r\n    } catch {\r\n      setError(t('Enter a valid deadline'))\r\n    }\r\n  }, [value, setError, setDeadline, t])\r\n\r\n  return (\r\n    <StyledTransactionDeadlineSetting>\r\n      <Label>\r\n        <Text style={{ fontWeight: 600 }}>{t('Transaction deadline')}</Text>\r\n        <QuestionHelper text={t('Your transaction will revert if it is pending for more than this long.')} />\r\n      </Label>\r\n      <Field>\r\n        <Input type=\"number\" step=\"1\" min=\"1\" value={value} onChange={handleChange} />\r\n        <Text>{t('Minutes')}</Text>\r\n      </Field>\r\n      {error && (\r\n        <Text mt=\"8px\" color=\"failure\">\r\n          {error}\r\n        </Text>\r\n      )}\r\n    </StyledTransactionDeadlineSetting>\r\n  )\r\n}\r\n\r\nexport default TransactionDeadlineSetting\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Toggle } from 'archerswap-uikit'\r\nimport { useExpertModeManager } from 'state/user/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport QuestionHelper from '../QuestionHelper'\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\n\r\nconst Label = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst ExpertModeSetting = () => {\r\n  const { t } = useTranslation()\r\n  const [isExpertMode, toggleSetExpertMode] = useExpertModeManager()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Label>\r\n        <Text style={{ fontWeight: 600 }}>{t('Expert Mode')}</Text>\r\n        <QuestionHelper\r\n          text={t('Bypasses confirmation modals and allows high slippage trades. Use at your own risk.')}\r\n        />\r\n      </Label>\r\n      <Toggle checked={isExpertMode} onChange={() => toggleSetExpertMode()} scale=\"sm\" />\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default ExpertModeSetting\r\n","import React from 'react'\r\nimport { Modal } from 'archerswap-uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport SlippageToleranceSetting from './SlippageToleranceSetting'\r\nimport TransactionDeadlineSetting from './TransactionDeadlineSetting'\r\nimport ExpertModeSetting from './ExpertModeSetting'\r\n\r\ntype SettingsModalProps = {\r\n  onDismiss?: () => void\r\n}\r\n\r\n// TODO: Fix UI Kit typings\r\nconst defaultOnDismiss = () => null\r\n\r\nconst SettingsModal = ({ onDismiss = defaultOnDismiss }: SettingsModalProps) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Modal title={t('Settings')} onDismiss={onDismiss}>\r\n      <SlippageToleranceSetting />\r\n      <TransactionDeadlineSetting />\r\n      <ExpertModeSetting />\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default SettingsModal\r\n","import React, { useMemo } from 'react'\r\nimport { CheckmarkCircleIcon, ErrorIcon, Flex, LinkExternal, Text, Modal, Button } from 'archerswap-uikit'\r\nimport { useActiveWeb3React } from 'hooks'\r\nimport { getSnowtraceLink } from 'utils'\r\nimport { isTransactionRecent, useAllTransactions } from 'state/transactions/hooks'\r\nimport { TransactionDetails } from 'state/transactions/reducer'\r\nimport Loader from 'components/Loader'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ntype RecentTransactionsModalProps = {\r\n  onDismiss?: () => void\r\n}\r\n\r\n// TODO: Fix UI Kit typings\r\nconst defaultOnDismiss = () => null\r\n\r\nconst newTransactionsFirst = (a: TransactionDetails, b: TransactionDetails) => b.addedTime - a.addedTime\r\n\r\nconst getRowStatus = (sortedRecentTransaction: TransactionDetails) => {\r\n  const { hash, receipt } = sortedRecentTransaction\r\n\r\n  if (!hash) {\r\n    return { icon: <Loader />, color: 'text' }\r\n  }\r\n\r\n  if (hash && receipt?.status === 1) {\r\n    return { icon: <CheckmarkCircleIcon color=\"success\" />, color: 'success' }\r\n  }\r\n\r\n  return { icon: <ErrorIcon color=\"failure\" />, color: 'failure' }\r\n}\r\n\r\nconst RecentTransactionsModal = ({ onDismiss = defaultOnDismiss }: RecentTransactionsModalProps) => {\r\n  const { t } = useTranslation()\r\n  const { account, chainId } = useActiveWeb3React()\r\n  const allTransactions = useAllTransactions()\r\n\r\n  // Logic taken from Web3Status/index.tsx line 175\r\n  const sortedRecentTransactions = useMemo(() => {\r\n    const txs = Object.values(allTransactions)\r\n    return txs.filter(isTransactionRecent).sort(newTransactionsFirst)\r\n  }, [allTransactions])\r\n\r\n  return (\r\n    <Modal title={t('Recent transactions')} onDismiss={onDismiss}>\r\n      {!account && (\r\n        <Flex justifyContent=\"center\" flexDirection=\"column\" alignItems=\"center\">\r\n          <Text mb=\"8px\" bold>\r\n            {t('Please connect your wallet to view your recent transactions')}\r\n          </Text>\r\n          <Button variant=\"tertiary\" scale=\"sm\" onClick={onDismiss}>\r\n            {t('Close')}\r\n          </Button>\r\n        </Flex>\r\n      )}\r\n      {account && chainId && sortedRecentTransactions.length === 0 && (\r\n        <Flex justifyContent=\"center\" flexDirection=\"column\" alignItems=\"center\">\r\n          <Text mb=\"8px\" bold>\r\n            {t('No recent transactions')}\r\n          </Text>\r\n          <Button variant=\"tertiary\" scale=\"sm\" onClick={onDismiss}>\r\n            {t('Close')}\r\n          </Button>\r\n        </Flex>\r\n      )}\r\n      {account &&\r\n        chainId &&\r\n        sortedRecentTransactions.map((sortedRecentTransaction) => {\r\n          const { hash, summary } = sortedRecentTransaction\r\n          const { icon, color } = getRowStatus(sortedRecentTransaction)\r\n\r\n          return (\r\n            <>\r\n              <Flex key={hash} alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\r\n                <LinkExternal href={getSnowtraceLink(chainId, hash, 'transaction')} color={color}>\r\n                  {summary ?? hash}\r\n                </LinkExternal>\r\n                {icon}\r\n              </Flex>\r\n            </>\r\n          )\r\n        })}\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default RecentTransactionsModal\r\n","import React, { ReactNode } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, IconButton, Text, Flex, useModal, CogIcon, Svg } from 'archerswap-uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport SettingsModal from './SettingsModal'\r\nimport RecentTransactionsModal from './RecentTransactionsModal'\r\n\r\ninterface PageHeaderProps {\r\n  title: ReactNode\r\n  description?: ReactNode\r\n  isShowSetting?: boolean\r\n  children?: ReactNode\r\n}\r\n\r\nconst HistoryIcon = () => (\r\n  <Svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n    <path\r\n      d=\"M13 3C8.03 3 4 7.03 4 12H1L4.89 15.89L4.96 16.03L9 12H6C6 8.13 9.13 5 13 5C16.87 5 20 8.13 20 12C20 15.87 16.87 19 13 19C11.07 19 9.32 18.21 8.06 16.94L6.64 18.36C8.27 19.99 10.51 21 13 21C17.97 21 22 16.97 22 12C22 7.03 17.97 3 13 3ZM12 8V13L16.28 15.54L17 14.33L13.5 12.25V8H12Z\"\r\n      fill=\"#EAAA08\"\r\n    />\r\n  </Svg>\r\n)\r\n\r\nconst StyledPageHeader = styled.div`\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.borderColor};\r\n  padding: 24px;\r\n`\r\n\r\nconst Details = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nconst PageHeader = ({ title, description, isShowSetting = true, children }: PageHeaderProps) => {\r\n  const { t } = useTranslation()\r\n  const [onPresentSettings] = useModal(<SettingsModal />)\r\n  const [onPresentRecentTransactions] = useModal(<RecentTransactionsModal />)\r\n\r\n  return (\r\n    <StyledPageHeader>\r\n      <Flex alignItems=\"center\">\r\n        <Details>\r\n          <Heading mb=\"8px\" color=\"text\">\r\n            {title}\r\n          </Heading>\r\n          {description && (\r\n            <Text color=\"textDisabled\" fontSize=\"14px\">\r\n              {description}\r\n            </Text>\r\n          )}\r\n        </Details>\r\n        {isShowSetting && (\r\n          <IconButton variant=\"text\" onClick={onPresentSettings} title={t('Settings')}>\r\n            <CogIcon width=\"24px\" color=\"#EAAA08\" />\r\n          </IconButton>\r\n        )}\r\n        {isShowSetting && (\r\n          <IconButton variant=\"text\" onClick={onPresentRecentTransactions} title={t('Recent transactions')}>\r\n            <HistoryIcon />\r\n          </IconButton>\r\n        )}\r\n      </Flex>\r\n      {children && <Text mt=\"16px\">{children}</Text>}\r\n    </StyledPageHeader>\r\n  )\r\n}\r\n\r\nexport default PageHeader\r\n","import { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useLpTokenFromSymbol } from './useContract'\r\nimport addresses from '../constants/token/archerswap.json'\r\n\r\nconst useGetApiPrices = () => {\r\n  const [prices, setPrices] = useState({})\r\n  const { account, chainId } = useWeb3React()\r\n  const usdcCoreContract: any = useLpTokenFromSymbol('usdc-core')\r\n  // const ethUsdcContract: any = useLpTokenFromSymbol('eth-usdc')\r\n  // const btcUsdcContract: any = useLpTokenFromSymbol('btc-usdc')\r\n\r\n  const getLpPrice = async (contract, baseTokenSymbol, price = 1) => {\r\n    let lpPrice = new BigNumber(0)\r\n    const token0 = await contract.token0()\r\n    const result = await contract.getReserves()\r\n    const totalSupply = await contract.totalSupply()\r\n    const address = await addresses.tokens\r\n      .find((t) => t.symbol.toLowerCase().includes(baseTokenSymbol.toLowerCase()))\r\n      ?.address.toLowerCase()\r\n\r\n    if (token0.toLowerCase() === address) {\r\n      lpPrice = new BigNumber(result._reserve0._hex).times(price).times(2).div(new BigNumber(totalSupply._hex))\r\n    } else {\r\n      lpPrice = new BigNumber(result._reserve1._hex).times(price).times(2).div(new BigNumber(totalSupply._hex))\r\n    }\r\n    if ((baseTokenSymbol === 'usdc' || baseTokenSymbol === 'usdt') && baseTokenSymbol !== 'dai') {\r\n      lpPrice = lpPrice.times(10 ** 12)\r\n    }\r\n    if (baseTokenSymbol === 'btc') {\r\n      lpPrice = lpPrice.times(10 ** 2)\r\n    }\r\n    return lpPrice.toString()\r\n  }\r\n\r\n  // const getEthPrice = async () => {\r\n  //   let usdcReserve: any = 0\r\n  //   let ethReserve: any = 0\r\n  //   let price: any = 0\r\n\r\n  //   const token0 = await ethUsdcContract.token0()\r\n  //   const result = await ethUsdcContract.getReserves()\r\n\r\n  //   if (token0 === '0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664') {\r\n  //     usdcReserve = result._reserve0.toString()\r\n  //     ethReserve = result._reserve1.toString()\r\n  //   } else {\r\n  //     usdcReserve = result._reserve1.toString()\r\n  //     ethReserve = result._reserve0.toString()\r\n  //   }\r\n  //   price = new BigNumber(usdcReserve)\r\n  //     .div(ethReserve)\r\n  //     .times(10 ** 12)\r\n  //     .toString()\r\n  //   return price\r\n  // }\r\n\r\n  // const getBtcPrice = async () => {\r\n  //   let usdcReserve: any = 0\r\n  //   let btcReserve: any = 0\r\n  //   let price: any = 0\r\n\r\n  //   const token0 = await btcUsdcContract.token0()\r\n  //   const result = await btcUsdcContract.getReserves()\r\n\r\n  //   if (token0 === '0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664') {\r\n  //     usdcReserve = result._reserve0.toString()\r\n  //     btcReserve = result._reserve1.toString()\r\n  //   } else {\r\n  //     usdcReserve = result._reserve1.toString()\r\n  //     btcReserve = result._reserve0.toString()\r\n  //   }\r\n  //   price = new BigNumber(usdcReserve)\r\n  //     .div(btcReserve)\r\n  //     .times(10 ** 2)\r\n  //     .toString()\r\n  //   return price\r\n  // }\r\n\r\n  const getPrices = async () => {\r\n    let usdcReserve: any = 0\r\n    let coreReserve: any = 0\r\n    let price: any = 0\r\n\r\n    const token0 = await usdcCoreContract.token0()\r\n    const result = await usdcCoreContract.getReserves()\r\n\r\n    if (token0 === '0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664') {\r\n      usdcReserve = result._reserve0.toString()\r\n      coreReserve = result._reserve1.toString()\r\n    } else {\r\n      usdcReserve = result._reserve1.toString()\r\n      coreReserve = result._reserve0.toString()\r\n    }\r\n    price = new BigNumber(usdcReserve)\r\n      .div(coreReserve)\r\n      .times(10 ** 12)\r\n      .toString()\r\n    const usdcCorePrice = await getLpPrice(usdcCoreContract, 'WCORE', price)\r\n\r\n    setPrices({\r\n      wcore: price,\r\n      'usdc-core': usdcCorePrice,\r\n      // eth: ethPrice\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (account) {\r\n      getPrices()\r\n    }\r\n    const interval = setInterval(async () => {\r\n      if (account) {\r\n        getPrices()\r\n      }\r\n    }, 10 * 1000)\r\n    return () => clearInterval(interval)\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [account, chainId])\r\n\r\n  return prices\r\n}\r\n\r\nexport default useGetApiPrices\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getWeb3NoAccount } from 'utils/web3'\r\nimport { useTokenContract } from './useContract'\r\nimport { useActiveWeb3React } from './index'\r\n\r\nconst web3 = getWeb3NoAccount()\r\n\r\nconst useBalanceFromAddress = (address) => {\r\n  const { chainId, account }: any = useActiveWeb3React()\r\n  const [tokenBalance, setTokenBalance] = useState(new BigNumber(0))\r\n  const tokenContract = useTokenContract(address)\r\n\r\n  const getCoreBalance = async () => {\r\n    const coreBalance = await web3.eth.getBalance(account)\r\n    setTokenBalance(new BigNumber(coreBalance))\r\n  }\r\n\r\n  useEffect(() => {\r\n    const getTokenInfo = async () => {\r\n      if (!tokenContract) {\r\n        console.error('contract is null')\r\n        return\r\n      }\r\n      try {\r\n        if (address === '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7') {\r\n          const res = await web3.eth.getBalance(account)\r\n          setTokenBalance(new BigNumber(res))\r\n        } else {\r\n          const res = await tokenContract.balanceOf(account)\r\n          setTokenBalance(new BigNumber(res._hex))\r\n        }\r\n      } catch (e) {\r\n        console.error('fetch token balance had error', e)\r\n      }\r\n    }\r\n    if (account && tokenContract && address) {\r\n      getTokenInfo()\r\n    } else if (account) {\r\n      getCoreBalance()\r\n    } else {\r\n      setTokenBalance(new BigNumber(0))\r\n    }\r\n    const interval = setInterval(async () => {\r\n      if (account && tokenContract && address) {\r\n        getTokenInfo()\r\n      } else if (account) {\r\n        getCoreBalance()\r\n      } else {\r\n        setTokenBalance(new BigNumber(0))\r\n      }\r\n    }, 5000)\r\n\r\n    return () => clearInterval(interval)\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [account, chainId, tokenContract, address, web3.eth])\r\n\r\n  return tokenBalance\r\n}\r\n\r\nexport default useBalanceFromAddress\r\n","import { useState, useCallback } from 'react'\r\nimport { useActiveWeb3React } from './index'\r\nimport { useZapContract } from './useContract'\r\n\r\nconst ZERO = '0x0000000000000000000000000000000000000000'\r\nconst ZAP_ADDRESS = '0x3264D31DeE00d298D956d0C98B0B7354a042bD0A'\r\n\r\nconst useCreateLpToken = (params) => {\r\n  const [pending, setPending] = useState(false)\r\n  const { account }: any = useActiveWeb3React()\r\n  const zapContract = useZapContract(ZAP_ADDRESS)\r\n\r\n  const handleCreateLp = useCallback(async () => {\r\n    try {\r\n      setPending(true)\r\n      const option: any = {\r\n        from: account,\r\n      }\r\n      if (params._fromTokenAddress === ZERO) {\r\n        option.value = params.payableAmount\r\n      }\r\n      if (!zapContract) {\r\n        console.error('contract is null')\r\n        return\r\n      }\r\n      await zapContract.zapIn(\r\n        params._fromTokenAddress,\r\n        params._amountIn,\r\n        params._lpAddress,\r\n        params._token0Path,\r\n        params._token1Path,\r\n        `${params._minPoolTokens}`,\r\n        params._token0RouterAddress,\r\n        params._token1RouterAddress,\r\n        params._LPRouterAddress,\r\n        option,\r\n      )\r\n      setPending(false)\r\n    } catch (e) {\r\n      setPending(false)\r\n    }\r\n  }, [account, zapContract, params])\r\n\r\n  return { onCreateLp: handleCreateLp, pending }\r\n}\r\n\r\nexport default useCreateLpToken\r\n","import React, { useState } from 'react'\r\nimport { CardBody, ArrowDownIcon, Button, IconButton, Text, Input } from 'archerswap-uikit'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Dropdown, Spinner } from 'react-bootstrap'\r\nimport { AutoColumn } from 'components/Column'\r\nimport CardNav from 'components/CardNav'\r\nimport { AutoRow, RowBetween } from 'components/Row'\r\nimport { ArrowWrapper, BottomGrouping, Wrapper } from 'components/swap/styleds'\r\n\r\nimport useI18n from 'hooks/useI18n'\r\nimport useGetApiPrices from 'hooks/useGetApiPrices'\r\nimport useBalanceFromAddress from 'hooks/useBalanceFromAddress'\r\nimport useCreateLpToken from 'hooks/useCreateLp'\r\nimport PageHeader from 'components/PageHeader'\r\nimport lpContracts from 'constants/lpToken/index.json'\r\nimport AppBody from '../AppBody'\r\n\r\nconst CreateLpSelect = styled.div`\r\n  width: 100%;\r\n\r\n  img {\r\n    width: 32px;\r\n    margin-right: 4px;\r\n  }\r\n\r\n  .dropdown {\r\n    width: 100%;\r\n    button {\r\n      width: 100%;\r\n      border: ${({ theme }) => theme.colors.invertedContrast} !important;\r\n      background-color: ${({ theme }) => theme.colors.input} !important;\r\n      box-shadow: ${({ theme }) => theme.shadows.inset};\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n\r\n      &::after {\r\n        color: ${({ theme }) => theme.colors.text};\r\n      }\r\n    }\r\n    .create-lp-select-item {\r\n      display: flex;\r\n      align-items: center;\r\n      color: ${({ theme }) => theme.colors.text};\r\n    }\r\n    .dropdown-menu {\r\n      width: 100% !important;\r\n      height: 200px;\r\n      overflow: auto;\r\n      background-color: ${({ theme }) => theme.colors.invertedContrast};\r\n      .dropdown-item {\r\n        color: ${({ theme }) => theme.colors.text};\r\n      }\r\n    }\r\n  }\r\n`\r\nconst CoinPair = styled.div`\r\n  img {\r\n    border-radius: 50%;\r\n  }\r\n  img:nth-child(2) {\r\n    margin-left: -16px;\r\n  }\r\n`\r\n\r\nconst Field = styled.div`\r\n  align-items: center;\r\n  display: inline-flex;\r\n\r\n  & > ${Text} {\r\n    cursor: pointer;\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst ZERO = '0x0000000000000000000000000000000000000000'\r\n\r\nconst Zapin = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [lpTokenSymbol, setLpTokenSymbol] = useState('usdc-core')\r\n  const [baseTokenBalance, setBaseTokenBalance] = useState('')\r\n\r\n  const tokenBalance = useBalanceFromAddress(null)\r\n  const lpTokenBalance = useBalanceFromAddress(\r\n    lpContracts.archerswap[lpTokenSymbol]\r\n      ? lpContracts.archerswap[lpTokenSymbol].lpAddresses\r\n      : lpContracts.archerswap[Object.keys(lpContracts.archerswap)[0]].lpAddresses,\r\n  )\r\n  const prices: any = useGetApiPrices()\r\n  const routerAddress = '0x74f56a7560ef0c72cf6d677e3f5f51c2d579ff15'\r\n\r\n  const receiveAmount = prices[lpTokenSymbol]\r\n    ? new BigNumber(prices.wcore || 0).times(baseTokenBalance || 0).div(prices[lpTokenSymbol])\r\n    : new BigNumber(0)\r\n\r\n  const { onCreateLp, pending } = useCreateLpToken({\r\n    payableAmount: new BigNumber(baseTokenBalance || 0).times(10 ** 18).toString(10),\r\n    _fromTokenAddress: ZERO,\r\n    _amountIn: 0,\r\n    _lpAddress: lpContracts.archerswap[lpTokenSymbol]\r\n      ? lpContracts.archerswap[lpTokenSymbol].lpAddresses\r\n      : lpContracts.archerswap[Object.keys(lpContracts.archerswap)[0]].lpAddresses,\r\n    _token0Path: lpContracts.archerswap[lpTokenSymbol]\r\n      ? lpContracts.archerswap[lpTokenSymbol].token0Path\r\n      : lpContracts.archerswap[Object.keys(lpContracts.archerswap)[0]].token0Path,\r\n    _token1Path: lpContracts.archerswap[lpTokenSymbol]\r\n      ? lpContracts.archerswap[lpTokenSymbol].token1Path\r\n      : lpContracts.archerswap[Object.keys(lpContracts.archerswap)[0]].token1Path,\r\n    _minPoolTokens: receiveAmount\r\n      .times(0.9)\r\n      .times(10 ** 18)\r\n      .dp(0, 0)\r\n      .toNumber(),\r\n    _token0RouterAddress: routerAddress,\r\n    _token1RouterAddress: routerAddress,\r\n    _LPRouterAddress: routerAddress,\r\n  })\r\n\r\n  const handleCreateLp = async () => {\r\n    onCreateLp()\r\n  }\r\n  return (\r\n    <>\r\n      <CardNav activeIndex={2} />\r\n      <AppBody>\r\n        <Wrapper id=\"swap-page\">\r\n          <PageHeader\r\n            title={TranslateString(90, 'Create LP')}\r\n            description={TranslateString(91, 'One Click LP Creator')}\r\n            isShowSetting={false}\r\n          />\r\n          <CardBody>\r\n            <AutoColumn gap=\"md\">\r\n              <CreateLpSelect>\r\n                <Dropdown>\r\n                  <Dropdown.Toggle className=\"create-lp-select-toggle\">\r\n                    <div className=\"create-lp-select-item\">\r\n                      <img src=\"/images/coins/core.png\" alt=\"\" />\r\n                      <p>CORE</p>\r\n                      <img className=\"ml-auto\" src=\"/assets/images/chevron-down.svg\" alt=\"\" />\r\n                    </div>\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu className=\"create-lp-menu\">\r\n                    <Dropdown.Item>\r\n                      <div className=\"create-lp-select-item\">\r\n                        <img src=\"/images/coins/core.png\" alt=\"\" />\r\n                        <p>CORE</p>\r\n                      </div>\r\n                    </Dropdown.Item>\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n              </CreateLpSelect>\r\n              <Field>\r\n                <Input\r\n                  type=\"number\"\r\n                  value={baseTokenBalance}\r\n                  step=\"any\"\r\n                  placeholder=\"0\"\r\n                  onChange={(e: any) => setBaseTokenBalance(e.target.value.toString())}\r\n                />\r\n                <Text onClick={() => setBaseTokenBalance(new BigNumber(tokenBalance).div(10 ** 18).toString(10))}>\r\n                  MAX\r\n                </Text>\r\n              </Field>\r\n              <div\r\n                className=\"create-lp-balance\"\r\n                style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}\r\n              >\r\n                <p>Balance</p>\r\n                <p>{tokenBalance.div(10 ** 18).toString(10)}</p>\r\n              </div>\r\n              <AutoColumn justify=\"space-between\">\r\n                <AutoRow justify=\"center\" style={{ padding: '0 1rem' }}>\r\n                  <ArrowWrapper clickable={false}>\r\n                    <IconButton variant=\"tertiary\" style={{ borderRadius: '50%' }} scale=\"sm\">\r\n                      <ArrowDownIcon color=\"primary\" width=\"24px\" />\r\n                    </IconButton>\r\n                  </ArrowWrapper>\r\n                </AutoRow>\r\n              </AutoColumn>\r\n              <CreateLpSelect>\r\n                <Dropdown>\r\n                  <Dropdown.Toggle className=\"create-lp-select-toggle\">\r\n                    <div className=\"create-lp-select-item\">\r\n                      <CoinPair>\r\n                        <img\r\n                          src={\r\n                            lpContracts.archerswap[lpTokenSymbol]\r\n                              ? lpContracts.archerswap[lpTokenSymbol].asset1\r\n                              : lpContracts.archerswap[Object.keys(lpContracts.archerswap)[0]].asset1\r\n                          }\r\n                          alt=\"token\"\r\n                        />\r\n                        <img\r\n                          src={\r\n                            lpContracts.archerswap[lpTokenSymbol]\r\n                              ? lpContracts.archerswap[lpTokenSymbol].asset2\r\n                              : lpContracts.archerswap[Object.keys(lpContracts.archerswap)[0]].asset2\r\n                          }\r\n                          alt=\"token\"\r\n                        />\r\n                      </CoinPair>\r\n                      <p>\r\n                        {lpContracts.archerswap[lpTokenSymbol]\r\n                          ? lpContracts.archerswap[lpTokenSymbol].lpSymbol\r\n                          : lpContracts.archerswap[Object.keys(lpContracts.archerswap)[0]].lpSymbol}\r\n                      </p>\r\n                      <img className=\"ml-auto\" src=\"/assets/images/chevron-down.svg\" alt=\"\" />\r\n                    </div>\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu className=\"create-lp-menu\">\r\n                    {Object.keys(lpContracts.archerswap).map((key) => (\r\n                      <Dropdown.Item key={key} onClick={() => setLpTokenSymbol(key)}>\r\n                        <div className=\"create-lp-select-item\">\r\n                          <CoinPair>\r\n                            <img\r\n                              src={\r\n                                lpContracts.archerswap[key]\r\n                                  ? lpContracts.archerswap[key].asset1\r\n                                  : lpContracts.archerswap[Object.keys(lpContracts.archerswap)[0]].asset1\r\n                              }\r\n                              alt=\"token\"\r\n                            />\r\n                            <img\r\n                              src={\r\n                                lpContracts.archerswap[key]\r\n                                  ? lpContracts.archerswap[key].asset2\r\n                                  : lpContracts.archerswap[Object.keys(lpContracts.archerswap)[0]].asset2\r\n                              }\r\n                              alt=\"token\"\r\n                            />\r\n                          </CoinPair>\r\n                          <p>{lpContracts.archerswap[key].lpSymbol}</p>\r\n                        </div>\r\n                      </Dropdown.Item>\r\n                    ))}\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n              </CreateLpSelect>\r\n              <RowBetween align=\"center\">\r\n                <Text fontSize=\"14px\">Balance</Text>\r\n                <Text fontSize=\"14px\">{(lpTokenBalance || new BigNumber(0)).div(10 ** 18).toString(10)}</Text>\r\n              </RowBetween>\r\n              <RowBetween align=\"center\">\r\n                <Text fontWeight=\"bold\" fontSize=\"14px\">\r\n                  You Receive\r\n                </Text>\r\n                <Text fontWeight=\"bold\" fontSize=\"14px\">\r\n                  <p>≈ {receiveAmount.toString(10)} LP</p>\r\n                </Text>\r\n              </RowBetween>\r\n              <RowBetween align=\"center\">\r\n                <Text fontSize=\"14px\">Slippage Tolerance</Text>\r\n                <Text fontSize=\"14px\">10.00%</Text>\r\n              </RowBetween>\r\n              <RowBetween align=\"center\">\r\n                <Text fontSize=\"14px\">Min.Received</Text>\r\n                <Text fontSize=\"14px\">{receiveAmount.times(0.9).toString(10)} LP</Text>\r\n              </RowBetween>\r\n            </AutoColumn>\r\n            <BottomGrouping>\r\n              <Button\r\n                disabled={\r\n                  pending ||\r\n                  !baseTokenBalance ||\r\n                  new BigNumber(baseTokenBalance).isGreaterThan(new BigNumber(tokenBalance).div(10 ** 18))\r\n                }\r\n                width=\"100%\"\r\n                onClick={handleCreateLp}\r\n              >\r\n                {pending && <Spinner animation=\"border\" size=\"sm\" style={{ marginRight: 5 }} />}\r\n                Get{' '}\r\n                {lpContracts.archerswap[lpTokenSymbol]\r\n                  ? lpContracts.archerswap[lpTokenSymbol].lpSymbol\r\n                  : lpContracts.archerswap[Object.keys(lpContracts.archerswap)[0]].lpSymbol}{' '}\r\n                LP\r\n              </Button>\r\n            </BottomGrouping>\r\n          </CardBody>\r\n        </Wrapper>\r\n      </AppBody>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Zapin\r\n"],"sourceRoot":""}