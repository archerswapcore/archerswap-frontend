{"version":3,"sources":["hooks/api.ts","components/Marketplace/CollectionCard/index.tsx","views/Marketplace/Marketplace.tsx"],"names":["useCollections","useState","data","setData","useEffect","a","marketplaceClient","query","getERC721CollectionsQuery","variables","fetchPolicy","res","GetERC721Collections","console","error","fetchData","useCollection","alias","getERC721CollectionQuery","GetERC721Collection","length","useCollectionAttributes","getERC721CollectionAttributesQuery","GetERC721CollectionAttributes","currentInput1","useERC721TokenCount","input","getERC721TokenCountQuery","GetERC721TokenCount","pageSize","filters","JSON","stringify","currentInput2","useERC721Tokens","getERC721TokensQuery","GetERC721Tokens","currentInput3","useERC721RecentEventsLite","ERC721RecentEventsLiteQuery","ERC721RecentEventsLite","chainId","tokenAddress","useERC721Token","tokenId","getERC721TokenQuery","GetERC721Token","currentInput4","useERC721TokenEvents","ERC721TokenEventsQuery","ERC721TokenEvents","CollectionCardContainer","styled","div","theme","colors","card","text","CollectionCard","collectionInfo","className","src","bannerUrl","alt","name","to","Background","CollectionList","Marketplace","isDark","useTheme","collections","Banner","mobileSrc","title","map","collection"],"mappings":"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","file":"static/js/50.7a3af38b.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport { marketplaceClient } from '../apollo/client'\r\nimport {\r\n  // factoryQuery,\r\n  // tokensQuery,\r\n  getERC721CollectionsQuery,\r\n  getERC721CollectionQuery,\r\n  getERC721CollectionAttributesQuery,\r\n  getERC721TokenCountQuery,\r\n  getERC721TokensQuery,\r\n  ERC721RecentEventsLiteQuery,\r\n  getERC721TokenQuery,\r\n  ERC721TokenEventsQuery,\r\n} from '../apollo/queries'\r\n\r\n/* eslint-disable camelcase */\r\n\r\nexport interface TradePair {\r\n  swap_pair_contract: string\r\n  base_symbol: string\r\n  quote_symbol: string\r\n  last_price: number\r\n  base_volume_24_h: number\r\n  quote_volume_24_h: number\r\n}\r\n\r\nexport interface ApiStatResponse {\r\n  update_at: string\r\n  '24h_total_volume': number\r\n  total_value_locked: number\r\n  total_value_locked_all: number\r\n  trade_pairs: {\r\n    [key: string]: TradePair\r\n  }\r\n}\r\n\r\nexport const useGetStats = () => {\r\n  const [data /* setData */] = useState<ApiStatResponse | null>(null)\r\n\r\n  // useEffect(() => {\r\n  //   const fetchData = async () => {\r\n  //     try {\r\n  //       const result = await bowClient.query({\r\n  //         query: factoryQuery,\r\n  //         variables: {},\r\n  //         fetchPolicy: 'no-cache',\r\n  //       })\r\n\r\n  //       if (result?.data) {\r\n  //         let pairTVL = 0\r\n  //         result.data.uniswapFactories.map((factory) => {\r\n  //           pairTVL += parseFloat(factory.totalLiquidityUSD)\r\n  //           return pairTVL\r\n  //         })\r\n\r\n  //         const responsedata: ApiStatResponse = {\r\n  //           update_at: '',\r\n  //           '24h_total_volume': 0,\r\n  //           total_value_locked: 0,\r\n  //           total_value_locked_all: pairTVL,\r\n  //           trade_pairs: null,\r\n  //         }\r\n  //         setData(responsedata)\r\n  //       }\r\n  //     } catch (error) {\r\n  //       console.error('Unable to fetch data:', error)\r\n  //     }\r\n  //   }\r\n\r\n  //   fetchData()\r\n  // }, [setData])\r\n\r\n  return data\r\n}\r\n\r\nexport const useTokensData = () => {\r\n  const [data] = useState<ApiStatResponse | 0>(0)\r\n\r\n  // useEffect(() => {\r\n  //   const fetchData = async () => {\r\n  //     try {\r\n  //       const result = await bowClient.query({\r\n  //         query: tokensQuery,\r\n  //         variables: {},\r\n  //         fetchPolicy: 'no-cache',\r\n  //       })\r\n  //       setData(result?.data?.tokens.length)\r\n  //     } catch (error) {\r\n  //       console.error('Unable to fetch data:', error)\r\n  //     }\r\n  //   }\r\n\r\n  //   fetchData()\r\n  // }, [setData])\r\n\r\n  return data\r\n}\r\n\r\n// Marketplace GraphQL\r\n\r\nexport const useCollections = () => {\r\n  const [data, setData] = useState([])\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const { data: res } = await marketplaceClient.query({\r\n          query: getERC721CollectionsQuery,\r\n          variables: {},\r\n          fetchPolicy: 'no-cache',\r\n        })\r\n        setData(res.GetERC721Collections || [])\r\n      } catch (error) {\r\n        console.error('Unable to fetch data:', error)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [setData])\r\n\r\n  return data\r\n}\r\n\r\nexport const useCollection = (alias: string) => {\r\n  const [data, setData] = useState({})\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const { data: res }: any = await marketplaceClient.query({\r\n          query: getERC721CollectionQuery(alias),\r\n          variables: {},\r\n          fetchPolicy: 'no-cache',\r\n        })\r\n        if (res.GetERC721Collection && res.GetERC721Collection.length !== 0) {\r\n          setData(res.GetERC721Collection[0])\r\n        }\r\n      } catch (error) {\r\n        console.error('Unable to fetch data:', error)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [alias])\r\n\r\n  return data\r\n}\r\n\r\nexport const useCollectionAttributes = (alias: string) => {\r\n  const [data, setData] = useState({})\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const { data: res }: any = await marketplaceClient.query({\r\n          query: getERC721CollectionAttributesQuery(alias),\r\n          variables: {},\r\n          fetchPolicy: 'no-cache',\r\n        })\r\n        if (res.GetERC721CollectionAttributes) {\r\n          setData(res.GetERC721CollectionAttributes)\r\n        }\r\n      } catch (error) {\r\n        console.error('Unable to fetch data:', error)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [alias])\r\n\r\n  return data\r\n}\r\n\r\nlet currentInput1 = {}\r\nexport const useERC721TokenCount = (input: any) => {\r\n  const [data, setData] = useState({})\r\n\r\n  useEffect(() => {\r\n    currentInput1 = {}\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const { data: res }: any = await marketplaceClient.query({\r\n          query: getERC721TokenCountQuery,\r\n          variables: { input },\r\n          fetchPolicy: 'no-cache',\r\n        })\r\n        if (res.GetERC721TokenCount) {\r\n          setData(res.GetERC721TokenCount)\r\n        }\r\n      } catch (error) {\r\n        console.error('Unable to fetch data:', error)\r\n      }\r\n    }\r\n    if (input.pageSize && input.filters && JSON.stringify(input) !== JSON.stringify(currentInput1)) {\r\n      currentInput1 = input\r\n      fetchData()\r\n    }\r\n  }, [input])\r\n\r\n  return data\r\n}\r\n\r\nlet currentInput2 = {}\r\nexport const useERC721Tokens = (input: any) => {\r\n  const [data, setData] = useState({})\r\n\r\n  useEffect(() => {\r\n    currentInput2 = {}\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const { data: res }: any = await marketplaceClient.query({\r\n          query: getERC721TokensQuery,\r\n          variables: { input },\r\n          fetchPolicy: 'no-cache',\r\n        })\r\n        if (res.GetERC721Tokens) {\r\n          setData(res.GetERC721Tokens)\r\n        }\r\n      } catch (error) {\r\n        console.error('Unable to fetch data:', error)\r\n      }\r\n    }\r\n    if (JSON.stringify(input) !== JSON.stringify(currentInput2)) {\r\n      currentInput2 = input\r\n      fetchData()\r\n    }\r\n  }, [input])\r\n\r\n  return data\r\n}\r\n\r\nlet currentInput3 = {}\r\nexport const useERC721RecentEventsLite = (input: any) => {\r\n  const [data, setData] = useState([])\r\n\r\n  useEffect(() => {\r\n    currentInput3 = {}\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const { data: res }: any = await marketplaceClient.query({\r\n          query: ERC721RecentEventsLiteQuery,\r\n          variables: { input },\r\n          fetchPolicy: 'no-cache',\r\n        })\r\n        if (res.ERC721RecentEventsLite) {\r\n          setData(res.ERC721RecentEventsLite)\r\n        }\r\n      } catch (error) {\r\n        console.error('Unable to fetch data:', error)\r\n      }\r\n    }\r\n    if (input.chainId && input.tokenAddress && JSON.stringify(input) !== JSON.stringify(currentInput3)) {\r\n      currentInput3 = input\r\n      fetchData()\r\n    }\r\n  }, [input])\r\n\r\n  return data\r\n}\r\n\r\nexport const useERC721Token = (alias: string, tokenId: string) => {\r\n  const [data, setData] = useState({})\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const { data: res }: any = await marketplaceClient.query({\r\n          query: getERC721TokenQuery(alias, tokenId),\r\n          variables: {},\r\n          fetchPolicy: 'no-cache',\r\n        })\r\n        if (res.GetERC721Token) {\r\n          setData(res.GetERC721Token)\r\n        }\r\n      } catch (error) {\r\n        console.error('Unable to fetch data:', error)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [alias, tokenId])\r\n\r\n  return data\r\n}\r\n\r\nlet currentInput4 = {}\r\nexport const useERC721TokenEvents = (input: any) => {\r\n  const [data, setData] = useState([])\r\n\r\n  useEffect(() => {\r\n    currentInput4 = {}\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const { data: res }: any = await marketplaceClient.query({\r\n          query: ERC721TokenEventsQuery,\r\n          variables: { input },\r\n          fetchPolicy: 'no-cache',\r\n        })\r\n        if (res.ERC721TokenEvents) {\r\n          setData(res.ERC721TokenEvents)\r\n        }\r\n      } catch (error) {\r\n        console.error('Unable to fetch data:', error)\r\n      }\r\n    }\r\n    if (input.chainId && input.tokenAddress && JSON.stringify(input) !== JSON.stringify(currentInput4)) {\r\n      currentInput4 = input\r\n      fetchData()\r\n    }\r\n  }, [input])\r\n\r\n  return data\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button } from 'archerswap-uikit'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst CollectionCardContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.colors.card};\r\n  box-shadow: 0px 4px 10px rgba(105, 105, 105, 0.15);\r\n  border-radius: 16px;\r\n\r\n  .collection_wrap {\r\n    height: 160px;\r\n    overflow: hidden;\r\n    border-top-left-radius: 16px;\r\n    border-top-right-radius: 16px;\r\n  }\r\n\r\n  .name {\r\n    font-weight: 600;\r\n    font-size: 20px;\r\n    color: ${({ theme }) => theme.colors.text};\r\n    margin-top: 18px;\r\n    margin-bottom: 18px;\r\n  }\r\n\r\n  button {\r\n    width: 148px;\r\n    height: 28px;\r\n    background-color: transparent;\r\n    box-sizing: border-box;\r\n    border-radius: 24px;\r\n    margin-bottom: 20px;\r\n    font-weight: 500;\r\n    font-size: 12px;\r\n  }\r\n`\r\nconst CollectionCard = ({ collectionInfo = {} }: any) => {\r\n  return (\r\n    <CollectionCardContainer>\r\n      <div className=\"collection_wrap\">\r\n        <img className=\"collection_banner\" src={collectionInfo.bannerUrl} alt=\"collection\" />\r\n      </div>\r\n      <div className=\"name\">{collectionInfo.name || ''}</div>\r\n      <Link to={`/marketplace/${collectionInfo.alias}`}>\r\n        <Button>Marketplace</Button>\r\n      </Link>\r\n    </CollectionCardContainer>\r\n  )\r\n}\r\n\r\nexport default CollectionCard\r\n","/* eslint-disable no-nested-ternary */\r\nimport React from 'react'\r\nimport styled from 'styled-components'\r\nimport useTheme from 'hooks/useTheme'\r\nimport Banner from 'components/Banner'\r\nimport CollectionCard from 'components/Marketplace/CollectionCard'\r\nimport { useCollections } from 'hooks/api'\r\n\r\nconst Background = styled.div<any>`\r\n  width: 100%;\r\n  min-height: calc(100vh - 64px);\r\n  background: ${({ theme }) => theme.colors.card};\r\n\r\n  .my-nft-btn-wrap {\r\n    display: flex;\r\n    justify-content: center;\r\n    width: 100%;\r\n    padding: 0 85px;\r\n\r\n    @media (max-width: 768px) {\r\n      padding: 0 24px;\r\n    }\r\n  }\r\n`\r\n\r\nconst CollectionList = styled.div`\r\n  width: 100%;\r\n  display: grid;\r\n  column-gap: 24px;\r\n  row-gap: 32px;\r\n  grid-template-columns: repeat(auto-fit, minmax(312px, 312px));\r\n  justify-content: center;\r\n  padding: 40px 85px;\r\n  background: ${({ theme }) => theme.colors.card};\r\n\r\n  @media (max-width: 768px) {\r\n    grid-template-columns: repeat(auto-fit, minmax(240px, 240px));\r\n    justify-content: center;\r\n    padding: 24px;\r\n  }\r\n`\r\n\r\nconst Marketplace: React.FC = () => {\r\n  const { isDark } = useTheme()\r\n  const collections = useCollections()\r\n\r\n  return (\r\n    <Background isDark={isDark}>\r\n      <Banner\r\n        src=\"/images/assets/banners/marketplace_banner.png\"\r\n        mobileSrc=\"/images/assets/banners/mobile_marketplace_banner.png\"\r\n        alt=\"marketplace_banner\"\r\n        title=\"NFT MARKET\"\r\n        text=\"Buy and Sell NFTs on CORE Network\"\r\n      />\r\n      <CollectionList>\r\n        {collections.map((collection) => (\r\n          <CollectionCard collectionInfo={collection} key={collection.name} />\r\n        ))}\r\n      </CollectionList>\r\n    </Background>\r\n  )\r\n}\r\n\r\nexport default Marketplace\r\n"],"sourceRoot":""}