{"version":3,"sources":["components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","components/ExpandableSectionButton/index.ts","views/Vaults/components/types.ts","views/Vaults/components/VaultCard/DetailsSection.tsx","views/Vaults/components/VaultCard/CardHeading.tsx","views/Vaults/components/DepositModal.tsx","views/Vaults/components/WithdrawModal.tsx","views/Vaults/components/VaultCard/StakeAction.tsx","views/Vaults/components/Tooltip/Tooltip.tsx","views/Vaults/components/VaultCard/HarvestAction.tsx","views/Vaults/components/VaultCard/CardActionsContainer.tsx","views/Vaults/components/VaultCard/VaultCard.tsx","views/Vaults/components/VaultTable/Apr.tsx","views/Vaults/components/VaultTable/Vault.tsx","views/Vaults/components/VaultTable/Earned.tsx","views/Vaults/components/VaultTable/Details.tsx","views/Vaults/components/VaultTable/Multiplier.tsx","views/Vaults/components/VaultTable/Liquidity.tsx","views/Vaults/components/VaultTable/Actions/styles.ts","views/Vaults/components/VaultTable/Actions/HarvestAction.tsx","views/Vaults/components/VaultTable/Actions/StakedAction.tsx","views/Vaults/components/VaultTable/Actions/ActionPanel.tsx","views/Vaults/components/VaultTable/CellLayout.tsx","views/Vaults/components/VaultTable/Row.tsx","views/Vaults/components/VaultTable/VaultTable.tsx","views/Vaults/components/VaultTabButtons/index.tsx","views/Vaults/components/SearchInput.tsx","views/Vaults/components/Select/Select.tsx","views/Vaults/Vaults.tsx"],"names":["Wrapper","styled","div","theme","colors","textSubtle","ExpandableSectionButton","onClick","expanded","t","useTranslation","aria-label","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAdresses","tokenAddresses","firstPart","chainId","secondPart","ViewMode","StyledLinkExternal","LinkExternal","text","primary","DetailsSection","bscScanAddress","removed","totalValueFormated","lpLabel","addLiquidityUrl","justifyContent","href","external","Flex","MultiplierTag","Tag","card","CardHeading","multiplier","isCommunityVault","vaultImage","tokenSymbol","provider","alignItems","mb","src","toLocaleLowerCase","alt","width","height","flexDirection","split","variant","DepositModal","max","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","useCallback","e","currentTarget","value","handleSelectMax","title","symbol","ModalInput","onSelectMax","onChange","inputTitle","ModalActions","disabled","a","style","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","vault","onStake","useStakeVault","getAddress","vaultAddresses","onUnstake","useUnstakeVault","rawStakedBalance","getBalanceNumber","displayBalance","toLocaleString","useModal","onPresentDeposit","onPresentWithdraw","mr","TooltipContent","tooltip","background","zIndices","modal","Container","Tooltip","content","children","HarvestAction","earnings","props","account","useWeb3React","onReward","useVaultHarvest","strategyAddresses","rawEarningsBalance","Action","StyledUnlockButton","UnlockButton","StyledButton","Button","CardActions","requestedApproval","setRequestedApproval","useVaultFromSymbol","lpSymbol","pid","lpAddresses","useVaultUser","allowance","lpAddress","isSingle","token","address","process","lpName","toUpperCase","isApproved","isGreaterThan","isGreaterThanOrEqualTo","web3","useWeb3","lpContract","getBep20Contract","onApprove","useApproveVault","handleApprove","console","error","textTransform","fontSize","pr","mt","RainbowLight","keyframes","StyledCardAccent","FCard","Divider","borderColor","ExpandingWrapper","StyledText","Text","textDisabled","VaultCard","showExpandableSection","setShowExpandableSection","communityVaults","includes","liquidity","toNumber","undefined","maximumFractionDigits","replace","earnLabel","vaultApy","apy","liquidityUrlPathParts","quoteToken","BASE_ADD_LIQUIDITY_URL","display","CardActionsContainer","AprWrapper","Apr","originalValue","IconImage","mediaQueries","md","sm","Vault","label","className","Amount","span","earned","Earned","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","MultiplierWrapper","Multiplier","displayMultipler","toLowerCase","LiquidityWrapper","Liquidity","displayLiquidity","Number","ActionContainer","input","xl","ActionTitles","Title","secondary","Subtle","ActionContent","Staked","userData","prices","useGetApiPrices","earningsBigNumber","BigNumber","earningsBusd","quoteTokenPriceUsd","totalLiquidity","lpTotalInQuoteToken","times","lpPrice","vaultBalance","multipliedBy","useCountUp","start","end","duration","separator","decimals","countUp","update","updateValue","useRef","useEffect","current","ml","currentBalance","lg","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","apr","dual","exchangeLink","bsc","info","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","translationId","sortable","DesktopColumnSchema","cells","farm","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","VaultMobileCell","Row","setActionPanelToggled","toggleActionPanel","isXs","tableSchema","columnNames","map","column","hideButton","Object","keys","key","columnIndex","indexOf","React","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","VaultTable","tableWrapperEl","data","columns","rows","useTable","sortColumn","ref","row","original","scrollIntoView","behavior","VaultTabButtons","useRouteMatch","url","isExact","textColor","useTheme","isDark","activeIndex","scale","as","Link","to","borderRadius","StyledInput","Input","InputWrapper","SearchInput","setToggled","inputEl","placeholder","onBlur","DropDownHeader","shadows","inset","DropDownListContainer","dropdown","DropDownContainer","isOpen","css","inputSecondary","boxShadow","DropDownList","ul","ListItem","li","Select","options","containerRef","dropdownRef","setIsOpen","selectedOption","setSelectedOption","containerSize","setContainerSize","toggling","onOptionClicked","option","offsetWidth","offsetHeight","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","Background","Vaults","path","pathname","useLocation","vaultsLP","useValuts","bowPrice","usePriceBowUsd","query","setQuery","TABLE","viewMode","sortOption","setSortOption","providerOption","dispatch","useDispatch","useRefresh","fastRefresh","slowRefresh","fetchVaultUserDataAsync","stackedOnly","setStackedOnly","dailyVolumeUSD","setDailyVolumeUSD","axios","get","response","status","tickers","ticker","base","target","volume","converted_volume","usd","fetch","calculateAPY","totalFarmLiquidity","lpTotalMcInQuoteToken","rewardPrice","getVaultApy","poolWeight","activeVaults","filter","inactiveVaults","stackedOnlyVaults","vaultsList","vaultsToDisplay","vaultsToDisplayWithAPY","tokenBalanceMC","bow","volumeObj","feeApr","gt","quoteTokenAmount","toString","lowercaseQuery","isActive","vaultsStaked","rowData","vaults","orderBy","sortVaults","v","quoteTokenSymbol","cakePrice","image","Banner","mobileSrc","Page","checked","marginLeft","event","length","sort","b","exact","renderContent"],"mappings":"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","file":"static/js/42.d6505973.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from 'archerswap-uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.textSubtle};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"textSubtle\" bold>\r\n        {expanded ? t('Hide') : t('Details')}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, tokenAddresses }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const firstPart = quoteTokenAdresses ? quoteTokenAdresses[chainId] : 'CORE'\r\n  const secondPart = tokenAddresses ? tokenAddresses[chainId] : 'CORE'\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","export { default } from './ExpandableSectionButton'\r\n","export type TableProps = {\r\n  data?: TableDataTypes[]\r\n  selectedFilters?: string\r\n  sortBy?: string\r\n  sortDir?: string\r\n  onSort?: (value: string) => void\r\n}\r\n\r\nexport type ColumnsDefTypes = {\r\n  id: number\r\n  label: string\r\n  name: string\r\n  translationId: number\r\n  sortable: boolean\r\n}\r\n\r\nexport type ScrollBarProps = {\r\n  ref: string\r\n  width: number\r\n}\r\n\r\nexport type TableDataTypes = {\r\n  POOL: string\r\n  APY: string\r\n  EARNED: string\r\n  STAKED: string\r\n  DETAILS: string\r\n  LINKS: string\r\n}\r\n\r\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    translationId: 1072,\r\n    sortable: true,\r\n    label: 'Deposited + Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    translationId: 736,\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'multiplier',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: 'Provider',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'earned',\r\n    translationId: 1072,\r\n    sortable: true,\r\n    label: 'Deposited + Earned',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'apr',\r\n    translationId: 736,\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'liquidity',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: 'Liquidity',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport enum ViewMode {\r\n  'TABLE' = 'TABLE',\r\n  'CARD' = 'CARD',\r\n}\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, Link, LinkExternal } from 'archerswap-uikit'\r\n\r\nexport interface ExpandableSectionProps {\r\n  bscScanAddress?: string\r\n  removed?: boolean\r\n  totalValueFormated?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  text-decoration: none;\r\n  font-weight: normal;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    padding-left: 4px;\r\n    height: 18px;\r\n    width: auto;\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  bscScanAddress,\r\n  removed,\r\n  totalValueFormated,\r\n  lpLabel,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Stake')}:</Text>\r\n        <StyledLinkExternal href={addLiquidityUrl}>{lpLabel}</StyledLinkExternal>\r\n      </Flex>\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{t('Total Liquidity')}:</Text>\r\n          <Text>{totalValueFormated}</Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"flex-start\">\r\n        <Link external href={bscScanAddress} bold={false}>\r\n          {t('View on BscScan')}\r\n        </Link>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from 'archerswap-uikit'\r\nimport { CommunityTag, CoreTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityVault?: boolean\r\n  vaultImage?: string\r\n  tokenSymbol?: string\r\n  provider?: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n  color: ${({ theme }) => theme.colors.card};\r\n  background-color: ${({ theme }) => theme.colors.text};\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  isCommunityVault,\r\n  vaultImage,\r\n  tokenSymbol,\r\n  provider,\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Image src={`/images/farms/${vaultImage.toLocaleLowerCase()}.svg`} alt={tokenSymbol} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {isCommunityVault ? <CommunityTag /> : <CoreTag provider={provider} />}\r\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal, LinkExternal } from 'archerswap-uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal\r\n      title={tokenName === 'BOW' ? t(`Deposit %symbol%`, { symbol: tokenName }) : t('Deposit LP tokens')}\r\n      onDismiss={onDismiss}\r\n    >\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={t('Stake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\">\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={pendingTx || fullBalance === '0' || val === '0'}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {t('Get %symbol%', { symbol: tokenName })}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from 'archerswap-uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal\r\n      title={tokenName === 'BOW' ? t(`Withdraw %symbol%`, { symbol: tokenName }) : t('Withdraw LP tokens')}\r\n      onDismiss={onDismiss}\r\n    >\r\n      <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={t('Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\">\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from 'archerswap-uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useStakeVault } from 'hooks/useStake'\r\nimport { useUnstakeVault } from 'hooks/useUnstake'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\ninterface VaultCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  addLiquidityUrl?: string\r\n  vault?: any\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<VaultCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  // pid,\r\n  addLiquidityUrl,\r\n  vault,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { onStake } = useStakeVault(getAddress(vault.vaultAddresses), tokenBalance)\r\n  const { onUnstake } = useUnstakeVault(getAddress(vault.vaultAddresses), stakedBalance)\r\n\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n  const rawCurrentBalance = getBalanceNumber(tokenBalance)\r\n  const displayBalance = rawCurrentBalance.toLocaleString()\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return rawStakedBalance === 0 ? (\r\n      <Button onClick={onPresentDeposit}>{t('Stake LP')}</Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\r\n          <AddIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport interface TooltipProps {\r\n  content: React.ReactNode\r\n}\r\n\r\nconst TooltipContent = styled.div`\r\n  background: ${({ theme }) => theme.tooltip.background};\r\n  padding: 16px;\r\n  border-radius: 16px;\r\n  color: ${({ theme }) => theme.tooltip.text};\r\n  width: max-content;\r\n  display: none;\r\n  padding: 16px;\r\n  max-height: 500px;\r\n  z-index: ${({ theme }) => theme.zIndices.modal};\r\n  position: absolute;\r\n  bottom: calc(100% + 16px);\r\n  transform: translate(34px, 0);\r\n  right: 0;\r\n  max-width: 246px;\r\n\r\n  &:after {\r\n    content: '';\r\n    display: block;\r\n    width: 0;\r\n    height: 0;\r\n    border-left: 10px solid transparent;\r\n    border-right: 10px solid transparent;\r\n    border-top: 10px solid ${({ theme }) => theme.tooltip.background};\r\n    bottom: 0;\r\n    position: absolute;\r\n    transform: translate(-34px, 9px);\r\n    right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n\r\n  &:hover ${TooltipContent}, &:focus-within ${TooltipContent} {\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst Tooltip: React.FunctionComponent<TooltipProps> = ({ content, children }) => {\r\n  return (\r\n    <Container>\r\n      {children}\r\n      <TooltipContent>{content}</TooltipContent>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Tooltip\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from 'archerswap-uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useVaultHarvest } from 'hooks/useHarvest'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport Tooltip from '../Tooltip/Tooltip'\r\n\r\ninterface VaultCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n  strategyAddresses?: any\r\n}\r\n\r\nconst HarvestAction: React.FC<VaultCardActionsProps> = ({ earnings, ...props }) => {\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useVaultHarvest(getAddress(props.strategyAddresses))\r\n\r\n  const rawEarningsBalance = account ? getBalanceNumber(earnings) : 0\r\n  const displayBalance = rawEarningsBalance.toLocaleString()\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      <Tooltip\r\n        content={t(\r\n          'Users who call the compound button will call the contract for everyone in the vault contract. You will receive 0.5% of the entire compound as a wcore reward to compensate for your gas costs',\r\n        )}\r\n      >\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onReward()\r\n            setPendingTx(false)\r\n          }}\r\n        >\r\n          {t('Compound')}\r\n        </Button>\r\n      </Tooltip>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBep20Contract } from 'utils/contractHelpers'\r\nimport { Button, Flex, Text } from 'archerswap-uikit'\r\nimport { Vault } from 'state/types'\r\nimport { useVaultFromSymbol, useVaultUser } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { useApproveVault } from 'hooks/useApprove'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nconst StyledUnlockButton = styled(UnlockButton)`\r\n  color: #000000;\r\n  width: 100%;\r\n  border-radius: 7px;\r\n`\r\nconst StyledButton = styled(Button)`\r\n  color: #000000;\r\n`\r\n\r\nexport interface VaultWithStakedValue extends Vault {\r\n  apy?: number\r\n}\r\n\r\ninterface VaultCardActionsProps {\r\n  vault: VaultWithStakedValue\r\n  provider?: ProviderType\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst CardActions: React.FC<VaultCardActionsProps> = ({ vault, account, addLiquidityUrl }) => {\r\n  const { t } = useTranslation()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses } = useVaultFromSymbol(vault.lpSymbol)\r\n  const { allowance, tokenBalance, stakedBalance, earnings } = useVaultUser(pid, vault.provider)\r\n  let lpAddress = getAddress(lpAddresses)\r\n\r\n  if (vault.isSingle) {\r\n    lpAddress = vault.token.address[process.env.REACT_APP_CHAIN_ID]\r\n  }\r\n  const lpName = vault.lpSymbol.toUpperCase()\r\n  const isApproved =\r\n    account && allowance && allowance.isGreaterThan(0) && allowance.isGreaterThanOrEqualTo(tokenBalance)\r\n\r\n  const web3 = useWeb3()\r\n\r\n  const lpContract = getBep20Contract(lpAddress, web3)\r\n\r\n  const { onApprove } = useApproveVault(lpContract, getAddress(vault.vaultAddresses))\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={lpName}\r\n        pid={pid}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        vault={vault}\r\n      />\r\n    ) : (\r\n      <StyledButton mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\r\n        {t('Approve Contract')}\r\n      </StyledButton>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"3px\">\r\n          {/* TODO: Is there a way to get a dynamic value here from useVaultFromSymbol? */}\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Deposited + Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} {...vault} />\r\n      <Flex>\r\n        {/* <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text> */}\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Your wallet balance available')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <StyledUnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from 'archerswap-uikit'\r\nimport { communityVaults } from 'config/constants'\r\nimport { Vault } from 'state/types'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\n\r\nexport interface VaultWithStakedValue extends Vault {\r\n  apy?: number\r\n  liquidity?: BigNumber\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n\t0% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n\t50% {\r\n\t\tbackground-position: 100% 50%;\r\n\t}\r\n\t100% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(\r\n    45deg,\r\n    rgba(255, 0, 0, 1) 0%,\r\n    rgba(255, 154, 0, 1) 10%,\r\n    rgba(208, 222, 33, 1) 20%,\r\n    rgba(79, 220, 74, 1) 30%,\r\n    rgba(63, 218, 216, 1) 40%,\r\n    rgba(47, 201, 226, 1) 50%,\r\n    rgba(28, 127, 238, 1) 60%,\r\n    rgba(95, 21, 242, 1) 70%,\r\n    rgba(186, 12, 248, 1) 80%,\r\n    rgba(251, 7, 217, 1) 90%,\r\n    rgba(255, 0, 0, 1) 100%\r\n  );\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 32px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 32px;\r\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\nconst StyledText = styled(Text)`\r\n  color: ${({ theme }) => theme.colors.textDisabled};\r\n`\r\n\r\ninterface VaultCardProps {\r\n  vault: VaultWithStakedValue\r\n  removed: boolean\r\n  bowPrice?: BigNumber\r\n  provider?: ProviderType\r\n  account?: string\r\n}\r\n\r\nconst VaultCard: React.FC<VaultCardProps> = ({ vault, removed, account }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  const isCommunityVault = communityVaults.includes(vault.token.symbol)\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  const vaultImage = vault.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n\r\n  const totalValueFormated = vault.liquidity\r\n    ? `$${vault.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n\r\n  const lpLabel = vault.lpSymbol && vault.lpSymbol.toUpperCase().replace('ARCHER', '')\r\n  const earnLabel = vault.lpSymbol // vault.dual ? vault.dual.earnLabel : 'BOW  '\r\n\r\n  const vaultApy = vault.apy && vault.apy.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAdresses: vault.quoteToken.address,\r\n    tokenAddresses: vault.token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return (\r\n    <FCard>\r\n      {['BOW'].includes(vault.token.symbol) && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={vault.multiplier}\r\n        isCommunityVault={isCommunityVault}\r\n        vaultImage={vaultImage}\r\n        tokenSymbol={vault.token.symbol}\r\n        provider={vault.provider}\r\n      />\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <StyledText>{t('APY')}:</StyledText>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {vault.apy ? (\r\n              <>\r\n                {/* <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apy={vault.apy} /> */}\r\n                {vaultApy}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"space-between\">\r\n        <StyledText>{t('Earned')}:</StyledText>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <CardActionsContainer vault={vault} account={account} addLiquidityUrl={addLiquidityUrl} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          bscScanAddress={`https://bscscan.com/address/${vault.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`}\r\n          totalValueFormated={totalValueFormated}\r\n          lpLabel={lpLabel}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default VaultCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n// import ApyButton from 'views/Vaults/components/VaultCard/ApyButton'\r\nimport { Address } from 'config/constants/types'\r\nimport BigNumber from 'bignumber.js'\r\n// import getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface AprProps {\r\n  value: string\r\n  // multiplier: string\r\n  lpLabel: string\r\n  quoteTokenAdresses: Address\r\n  quoteTokenSymbol: string\r\n  tokenAddresses: Address\r\n  cakePrice: BigNumber\r\n  originalValue: number\r\n  hideButton?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.text};\r\n\r\n  button {\r\n    width: 20px;\r\n    height: 20px;\r\n\r\n    svg {\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.textSubtle};\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst AprWrapper = styled.div`\r\n  min-width: 60px;\r\n  text-align: left;\r\n  word-break: break-all;\r\n`\r\n\r\nconst Apr: React.FC<AprProps> = ({\r\n  value,\r\n  // lpLabel,\r\n  // quoteTokenAdresses,\r\n  // tokenAddresses,\r\n  // cakePrice,\r\n  originalValue,\r\n  // hideButton = false,\r\n  // ...props\r\n}) => {\r\n  const { t } = useTranslation()\r\n  // const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, tokenAddresses })\r\n  // const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  return (\r\n    <Container>\r\n      {originalValue ? (\r\n        <>\r\n          <AprWrapper>{value}%</AprWrapper>\r\n          {/* {!hideButton && (\r\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apy={originalValue} addLiquidityUrl={addLiquidityUrl} />\r\n          )} */}\r\n        </>\r\n      ) : (\r\n        <AprWrapper>{t('Loading...')}</AprWrapper>\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Apr\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useVaultUser } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Text } from 'archerswap-uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\n\r\nexport interface VaultProps {\r\n  label: string\r\n  pid: number\r\n  image: string\r\n  provider?: string\r\n}\r\n\r\nconst IconImage = styled.div`\r\n  display: flex;\r\n  margin-right: 15px;\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    margin-right: 5px;\r\n  }\r\n  .first {\r\n    position: relative;\r\n    display: block;\r\n    border-radius: 50%;\r\n    z-index: 2;\r\n    width: 20px;\r\n    height: 20px;\r\n\r\n    ${({ theme }) => theme.mediaQueries.sm} {\r\n      width: 30px;\r\n      height: 30px;\r\n    }\r\n  }\r\n  .last {\r\n    z-index: 3;\r\n    display: block;\r\n    margin-left: -7px;\r\n    border-radius: 50%;\r\n    width: 20px;\r\n    height: 20px;\r\n\r\n    ${({ theme }) => theme.mediaQueries.sm} {\r\n      width: 30px;\r\n      height: 30px;\r\n      margin-left: -12px;\r\n    }\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  padding-left: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst Vault: React.FunctionComponent<VaultProps> = ({ label, pid, provider }) => {\r\n  const { stakedBalance } = useVaultUser(pid, provider)\r\n  const { t } = useTranslation()\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n\r\n  const handleRenderVaulting = (): JSX.Element => {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\r\n          {t('Staked')}\r\n        </Text>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      {/* <IconImage src={`/images/farms/${image}.svg`} alt=\"icon\" width={40} height={40} mr=\"8px\" /> */}\r\n      <IconImage>\r\n        <img className=\"first\" src={`/images/tokens/${label.split('-')[0].toLocaleLowerCase()}.png`} alt=\"icon\" />\r\n        <img className=\"last\" src={`/images/tokens/${label.split('-')[1].toLocaleLowerCase()}.png`} alt=\"icon\" />\r\n      </IconImage>\r\n      <div>\r\n        {handleRenderVaulting()}\r\n        <Text bold>{label}</Text>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Vault\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\n\r\nexport interface EarnedProps {\r\n  earnings: number\r\n  pid: number\r\n}\r\n\r\nconst Amount = styled.span<{ earned: number }>`\r\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Earned: React.FunctionComponent<EarnedProps> = ({ earnings }) => {\r\n  const { account } = useWeb3React()\r\n  const displayBalance = earnings !== null && account ? earnings.toLocaleString() : '?'\r\n\r\n  return <Amount earned={earnings}>{displayBalance}</Amount>\r\n}\r\n\r\nexport default Earned\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, useMatchBreakpoints } from 'archerswap-uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface DetailsProps {\r\n  actionPanelToggled: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  padding-right: 8px;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-right: 0px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 20px;\r\n`\r\n\r\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\r\n  const { isXl } = useMatchBreakpoints()\r\n  const isMobile = !isXl\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Container>\r\n      {!isMobile && t('Details')}\r\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Details\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n// import { HelpIcon } from 'archerswap-uikit'\r\n// import { useTranslation } from 'contexts/Localization'\r\n\r\n// import Tooltip from '../Tooltip/Tooltip'\r\n\r\nexport interface MultiplierProps {\r\n  multiplier: string\r\n}\r\n\r\nconst MultiplierWrapper = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  width: 36px;\r\n  text-align: right;\r\n  text-transform: capitalize;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    text-align: left;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    margin-left: 14px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    svg {\r\n      margin-left: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\r\n  const displayMultipler = multiplier ? multiplier.toLowerCase() : '-'\r\n  // const { t } = useTranslation()\r\n\r\n  return (\r\n    <Container>\r\n      <MultiplierWrapper>{displayMultipler}</MultiplierWrapper>\r\n      {/* <Tooltip\r\n        content={\r\n          <div>\r\n            {t('The multiplier represents the amount of BOW rewards each farm gets.')}\r\n            <br />\r\n            <br />\r\n            {t(\r\n              'For example, if a 1x farm was getting 1 BOW per block, a 2x farm would be getting 2 BOW per block.',\r\n            )}\r\n          </div>\r\n        }\r\n      >\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </Tooltip> */}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Multiplier\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Text } from 'archerswap-uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nimport Tooltip from '../Tooltip/Tooltip'\r\n\r\nexport interface LiquidityProps {\r\n  liquidity: number\r\n}\r\n\r\nconst LiquidityWrapper = styled.div`\r\n  min-width: 110px;\r\n  font-weight: 600;\r\n  text-align: right;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    text-align: left;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    margin-left: 14px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    svg {\r\n      margin-left: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\r\n  const displayLiquidity = liquidity\r\n    ? `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Container>\r\n      <LiquidityWrapper>\r\n        <Text>{displayLiquidity}</Text>\r\n      </LiquidityWrapper>\r\n      <Tooltip content={t('Total value of the funds in this vault’s liquidity pool')}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </Tooltip>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Liquidity\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 48px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nexport const Title = styled.span`\r\n  color: ${({ theme }) => theme.colors.secondary};\r\n`\r\n\r\nexport const Subtle = styled.span`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\nexport const Earned = styled.div`\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n`\r\n\r\nexport const Staked = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n`\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Button } from 'archerswap-uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { VaultWithStakedValue } from 'views/Vaults/components/VaultCard/VaultCard'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useVaultHarvest } from 'hooks/useHarvest'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useGetApiPrices } from 'state/hooks'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { useCountUp } from 'react-countup'\r\nimport Tooltip from '../../Tooltip/Tooltip'\r\n\r\nimport { ActionContainer, ActionTitles, Title, ActionContent, Earned, Staked } from './styles'\r\n\r\nconst HarvestAction: React.FunctionComponent<VaultWithStakedValue> = ({ userData, ...props }) => {\r\n  const { account } = useWeb3React()\r\n  const prices = useGetApiPrices()\r\n  const earningsBigNumber = userData && account ? new BigNumber(userData.earnings) : null\r\n  let earnings = null\r\n  let earningsBusd = 0\r\n  let displayBalance = '?'\r\n\r\n  if (earningsBigNumber) {\r\n    const quoteTokenPriceUsd = prices[props.quoteToken.symbol.toLowerCase()]\r\n    const totalLiquidity = new BigNumber(props.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\r\n    const lpPrice = new BigNumber(totalLiquidity).div(props.vaultBalance)\r\n    earnings = getBalanceNumber(earningsBigNumber)\r\n    earningsBusd = new BigNumber(earnings).multipliedBy(props.isSingle ? quoteTokenPriceUsd : lpPrice).toNumber()\r\n    displayBalance = earnings.toLocaleString()\r\n  }\r\n\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useVaultHarvest(getAddress(props.strategyAddresses))\r\n  const { t } = useTranslation()\r\n\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: earningsBusd,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals: 3,\r\n  })\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(earningsBusd)\r\n  }, [earningsBusd, updateValue])\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Title>{t('Deposited + Earned')}</Title>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Earned>{displayBalance}</Earned>\r\n          <Staked>~{countUp} USD</Staked>\r\n        </div>\r\n        <Tooltip\r\n          content={t(\r\n            'Users who call the compound button will call the contract for everyone in the vault contract. You will receive 0.5% of the entire compound as a wcore reward to compensate for your gas costs',\r\n          )}\r\n        >\r\n          <Button\r\n            disabled={pendingTx || !account}\r\n            onClick={async () => {\r\n              setPendingTx(true)\r\n              await onReward()\r\n              setPendingTx(false)\r\n            }}\r\n            ml=\"4px\"\r\n          >\r\n            {t('Compound')}\r\n          </Button>\r\n        </Tooltip>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useRef, useEffect, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon } from 'archerswap-uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useCountUp } from 'react-countup'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useVaultUser, useGetApiPrices } from 'state/hooks'\r\nimport { VaultWithStakedValue } from 'views/Vaults/components/VaultCard/VaultCard'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useApproveVault } from 'hooks/useApprove'\r\nimport { getBep20Contract } from 'utils/contractHelpers'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useStakeVault } from 'hooks/useStake'\r\nimport { useUnstakeVault } from 'hooks/useUnstake'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { getAddress } from 'utils/addressHelpers'\r\n\r\nimport DepositModal from '../../DepositModal'\r\nimport WithdrawModal from '../../WithdrawModal'\r\nimport { ActionContainer, ActionTitles, ActionContent, Earned, Subtle, Staked as Balanced } from './styles'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\nconst Staked: React.FunctionComponent<VaultWithStakedValue> = ({\r\n  pid,\r\n  lpSymbol,\r\n  lpAddresses,\r\n  quoteToken,\r\n  token,\r\n  ...props\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const prices = useGetApiPrices()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { allowance, tokenBalance, stakedBalance } = useVaultUser(pid, props.provider)\r\n  const { onStake } = useStakeVault(getAddress(props.vaultAddresses), tokenBalance)\r\n  const { onUnstake } = useUnstakeVault(getAddress(props.vaultAddresses), stakedBalance)\r\n  const web3 = useWeb3()\r\n\r\n  let earningsBusd = 0\r\n  let displayBalance = '?'\r\n\r\n  const isApproved =\r\n    lpSymbol === 'CORE'\r\n      ? true\r\n      : account && allowance && allowance.isGreaterThan(0) && allowance.isGreaterThanOrEqualTo(tokenBalance)\r\n\r\n  let lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  if (props.isSingle) {\r\n    lpAddress = token.address[process.env.REACT_APP_CHAIN_ID]\r\n  }\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAdresses: quoteToken.address,\r\n    tokenAddresses: token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n  const currentBalance = getBalanceNumber(tokenBalance)\r\n\r\n  const quoteTokenPriceUsd = prices[quoteToken.symbol.toLowerCase()]\r\n  const totalLiquidity = new BigNumber(props.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\r\n\r\n  let lpPrice = new BigNumber(0)\r\n  if (props.isSingle) {\r\n    lpPrice = new BigNumber(prices[lpSymbol === 'CORE' ? 'wcore' : lpSymbol.toLowerCase()])\r\n  } else {\r\n    lpPrice = new BigNumber(totalLiquidity).div(props.vaultBalance)\r\n  }\r\n\r\n  earningsBusd = new BigNumber(currentBalance).multipliedBy(lpPrice).toNumber()\r\n  displayBalance = currentBalance.toLocaleString()\r\n\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: earningsBusd,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals: 3,\r\n  })\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(earningsBusd)\r\n  }, [earningsBusd, updateValue])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(<WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={lpSymbol} />)\r\n\r\n  const lpContract = getBep20Contract(lpAddress, web3)\r\n\r\n  const { onApprove } = useApproveVault(lpContract, getAddress(props.vaultAddresses))\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Subtle>{t('Start Farming')}</Subtle>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <UnlockButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (isApproved) {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <ActionContainer>\r\n          <ActionTitles>\r\n            {/* <Title>{lpSymbol} </Title> */}\r\n            <Subtle>{t('Your wallet balance available')}</Subtle>\r\n          </ActionTitles>\r\n          <ActionContent>\r\n            <div>\r\n              <Earned>{displayBalance}</Earned>\r\n              <Balanced>~{countUp} USD</Balanced>\r\n            </div>\r\n            <IconButtonWrapper>\r\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n                <MinusIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n              <IconButton variant=\"secondary\" onClick={onPresentDeposit}>\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            </IconButtonWrapper>\r\n          </ActionContent>\r\n        </ActionContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Subtle>{t('Deposit %symbol%', { symbol: lpSymbol })} </Subtle>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button width=\"100%\" onClick={onPresentDeposit} variant=\"secondary\">\r\n            {lpSymbol === 'BOW' ? t(`Deposit %symbol%`, { symbol: lpSymbol }) : t('Deposit LP')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Subtle>{t('Enable Vault')}</Subtle>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\r\n          {t('Enable')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LinkExternal, Text } from 'archerswap-uikit'\r\nimport { VaultWithStakedValue } from 'views/Vaults/components/VaultCard/VaultCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { communityVaults } from 'config/constants'\r\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\r\n\r\nimport HarvestAction from './HarvestAction'\r\nimport StakedAction from './StakedAction'\r\nimport Apr, { AprProps } from '../Apr'\r\n// import Multiplier, { MultiplierProps } from '../Multiplier'\r\nimport Liquidity, { LiquidityProps } from '../Liquidity'\r\n\r\nexport interface ActionPanelProps {\r\n  apr: AprProps\r\n  // multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: VaultWithStakedValue\r\n}\r\n\r\nconst Container = styled.div`\r\n  background: ${({ theme }) => theme.colors.background};\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: column-reverse;\r\n  padding: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n`\r\n\r\nconst StakeContainer = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n  }\r\n`\r\n\r\nconst TagsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 25px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  > div {\r\n    height: 24px;\r\n    padding: 0 6px;\r\n    font-size: 14px;\r\n    margin-right: 4px;\r\n\r\n    svg {\r\n      width: 14px;\r\n    }\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\nconst InfoContainer = styled.div`\r\n  min-width: 200px;\r\n`\r\n\r\nconst ValueContainer = styled.div`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst ValueWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin: 4px 0px;\r\n`\r\n\r\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({ details, apr, liquidity }) => {\r\n  const vault = details\r\n\r\n  const { t } = useTranslation()\r\n  const { quoteToken, token, dual } = vault\r\n  const lpLabel = vault.lpSymbol && vault.lpSymbol.toUpperCase().replace('ARCHER', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAdresses: quoteToken.address,\r\n    tokenAddresses: token.address,\r\n  })\r\n\r\n  const lpAddress = vault.isSingle\r\n    ? vault.token.address[process.env.REACT_APP_CHAIN_ID]\r\n    : vault.lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const exchangeLink = vault.isSingle ? `/swap?outputCurrency=${lpAddress}` : `/add/${liquidityUrlPathParts}`\r\n\r\n  const bsc = `https://scan.coredao.org/address/${lpAddress}`\r\n  const info = `https://info.archerswap.finance/${vault.isSingle ? 'token' : 'pair'}/${lpAddress}`\r\n  const isCommunityVault = communityVaults.includes(token.symbol)\r\n\r\n  return (\r\n    <Container>\r\n      <InfoContainer>\r\n        <StakeContainer>\r\n          <StyledLinkExternal href={exchangeLink}>{t(`Get %symbol%`, { symbol: lpLabel })}</StyledLinkExternal>\r\n        </StakeContainer>\r\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\r\n        <StyledLinkExternal href={info}>{vault.isSingle ? t('See Token Info') : t('See Pair Info')}</StyledLinkExternal>\r\n        <TagsContainer>\r\n          {isCommunityVault ? <CommunityTag /> : <CoreTag provider={vault.provider} />}\r\n          {dual ? <DualTag /> : null}\r\n        </TagsContainer>\r\n      </InfoContainer>\r\n      <ValueContainer>\r\n        <ValueWrapper>\r\n          <Text>{t('APY')}</Text>\r\n          <Apr {...apr} />\r\n        </ValueWrapper>\r\n        {/* <ValueWrapper>\r\n          <Text>{t('Multiplier')}</Text>\r\n          <Multiplier {...multiplier} />\r\n        </ValueWrapper> */}\r\n        <ValueWrapper>\r\n          <Text>{t('Liquidity')}</Text>\r\n          <Liquidity {...liquidity} />\r\n        </ValueWrapper>\r\n      </ValueContainer>\r\n      <ActionContainer>\r\n        <HarvestAction {...vault} />\r\n        <StakedAction {...vault} />\r\n      </ActionContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Label = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  text-align: left;\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n  min-height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\ninterface CellLayoutProps {\r\n  label?: string\r\n}\r\n\r\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\r\n  return (\r\n    <div>\r\n      {label && <Label>{label}</Label>}\r\n      <ContentContainer>{children}</ContentContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CellLayout\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { VaultWithStakedValue } from 'views/Vaults/components/VaultCard/VaultCard'\r\nimport { useMatchBreakpoints } from 'archerswap-uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nimport Apr, { AprProps } from './Apr'\r\nimport Vault, { VaultProps } from './Vault'\r\nimport Earned, { EarnedProps } from './Earned'\r\nimport Details from './Details'\r\nimport Multiplier, { MultiplierProps } from './Multiplier'\r\nimport Liquidity, { LiquidityProps } from './Liquidity'\r\nimport ActionPanel from './Actions/ActionPanel'\r\nimport CellLayout from './CellLayout'\r\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\r\n\r\nexport interface RowProps {\r\n  apr: AprProps\r\n  farm: VaultProps\r\n  earned: EarnedProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: VaultWithStakedValue\r\n}\r\n\r\nconst cells = {\r\n  apr: Apr,\r\n  farm: Vault,\r\n  earned: Earned,\r\n  details: Details,\r\n  multiplier: Multiplier,\r\n  liquidity: Liquidity,\r\n}\r\n\r\nconst CellInner = styled.div`\r\n  padding: 24px 0px;\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  padding-right: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    padding-right: 32px;\r\n  }\r\n`\r\n\r\nconst StyledTr = styled.tr`\r\n  cursor: pointer;\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\r\n`\r\n\r\nconst EarnedMobileCell = styled.td`\r\n  padding: 16px 0 24px 16px;\r\n`\r\n\r\nconst AprMobileCell = styled.td`\r\n  padding-top: 16px;\r\n  padding-bottom: 24px;\r\n`\r\n\r\nconst VaultMobileCell = styled.td`\r\n  padding-top: 24px;\r\n`\r\n\r\nconst Row: React.FunctionComponent<RowProps> = (props) => {\r\n  const { details } = props\r\n  const [actionPanelToggled, setActionPanelToggled] = useState(false)\r\n  const { t } = useTranslation()\r\n\r\n  const toggleActionPanel = () => {\r\n    setActionPanelToggled(!actionPanelToggled)\r\n  }\r\n\r\n  const { isXl, isXs } = useMatchBreakpoints()\r\n\r\n  const isMobile = !isXl\r\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\r\n  const columnNames = tableSchema.map((column) => column.name)\r\n\r\n  const handleRenderRow = () => {\r\n    if (!isXs) {\r\n      return (\r\n        <StyledTr onClick={toggleActionPanel}>\r\n          {Object.keys(props).map((key) => {\r\n            const columnIndex = columnNames.indexOf(key)\r\n            if (columnIndex === -1) {\r\n              return null\r\n            }\r\n\r\n            switch (key) {\r\n              case 'details':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout>\r\n                        <Details actionPanelToggled={actionPanelToggled} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              case 'apr':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t('APY')}>\r\n                        <Apr {...props.apr} hideButton={isMobile} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              default:\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\r\n                        {React.createElement(cells[key], props[key])}\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n            }\r\n          })}\r\n        </StyledTr>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <StyledTr onClick={toggleActionPanel}>\r\n        <td>\r\n          <tr>\r\n            <VaultMobileCell>\r\n              <CellLayout>\r\n                <Vault {...props.farm} />\r\n              </CellLayout>\r\n            </VaultMobileCell>\r\n          </tr>\r\n          <tr>\r\n            <EarnedMobileCell>\r\n              <CellLayout label={t('Deposited + Earned')}>\r\n                <Earned {...props.earned} />\r\n              </CellLayout>\r\n            </EarnedMobileCell>\r\n            <AprMobileCell>\r\n              <CellLayout label={t('APY')}>\r\n                <Apr {...props.apr} hideButton />\r\n              </CellLayout>\r\n            </AprMobileCell>\r\n          </tr>\r\n        </td>\r\n        <td>\r\n          <CellInner>\r\n            <CellLayout>\r\n              <Details actionPanelToggled={actionPanelToggled} />\r\n            </CellLayout>\r\n          </CellInner>\r\n        </td>\r\n      </StyledTr>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {handleRenderRow()}\r\n      {actionPanelToggled && details && (\r\n        <tr>\r\n          <td colSpan={6}>\r\n            <ActionPanel {...props} />\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable, Button, ChevronUpIcon, ColumnType } from 'archerswap-uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nimport Row, { RowProps } from './Row'\r\n\r\nexport interface ITableProps {\r\n  data: RowProps[]\r\n  columns: ColumnType<RowProps>[]\r\n  sortColumn?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  filter: ${({ theme }) => theme.card.dropShadow};\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 16px;\r\n  margin: 16px 0px;\r\n`\r\n\r\nconst TableWrapper = styled.div`\r\n  overflow: visible;\r\n\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst StyledTable = styled.table`\r\n  border-collapse: collapse;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n`\r\n\r\nconst TableBody = styled.tbody`\r\n  & tr {\r\n    td {\r\n      font-size: 16px;\r\n      vertical-align: middle;\r\n    }\r\n  }\r\n`\r\n\r\nconst TableContainer = styled.div`\r\n  position: relative;\r\n}\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst VaultTable: React.FC<ITableProps> = (props) => {\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const { t } = useTranslation()\r\n  const { data, columns } = props\r\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\r\n\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TableContainer>\r\n        <TableWrapper ref={tableWrapperEl}>\r\n          <StyledTable>\r\n            <TableBody>\r\n              {rows.map((row) => {\r\n                return <Row {...row.original} key={`table-row-${row.id}`} />\r\n              })}\r\n            </TableBody>\r\n          </StyledTable>\r\n        </TableWrapper>\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" onClick={scrollToTop}>\r\n            {t('To Top')}\r\n            <ChevronUpIcon color=\"primary\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </TableContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default VaultTable\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useRouteMatch, Link } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem } from 'archerswap-uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useTheme from 'hooks/useTheme'\r\n\r\nconst VaultTabButtons = () => {\r\n  const { url, isExact } = useRouteMatch()\r\n  const { t } = useTranslation()\r\n  const { isDark } = useTheme()\r\n  const textColor = isDark ? '' : '#2A2A2A'\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ButtonMenu activeIndex={isExact ? 0 : 1} scale=\"sm\" variant=\"primary\">\r\n        <ButtonMenuItem as={Link} to={`${url}`} style={{ borderRadius: '30px', width: '125px', color: textColor }}>\r\n          {t('Live')}\r\n        </ButtonMenuItem>\r\n        <ButtonMenuItem\r\n          as={Link}\r\n          to={`${url}/history`}\r\n          style={{ borderRadius: '30px', width: '125px', color: textColor }}\r\n        >\r\n          {t('Finished')}\r\n        </ButtonMenuItem>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default VaultTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  a {\r\n    padding-left: 12px;\r\n    padding-right: 12px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 16px;\r\n  }\r\n`\r\n","import React, { useState, useRef } from 'react'\r\nimport { Input } from 'archerswap-uikit'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst StyledInput = styled(Input)`\r\n  border-radius: 16px;\r\n  margin-left: auto;\r\n  ::placeholder {\r\n    opacity: 0.5;\r\n  }\r\n`\r\n\r\nconst InputWrapper = styled.div`\r\n  position: relative;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 234px;\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ toggled: boolean }>``\r\n\r\ninterface Props {\r\n  value: string\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst SearchInput: React.FC<Props> = ({ value, onChange }) => {\r\n  const [toggled, setToggled] = useState(false)\r\n  const inputEl = useRef(null)\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Container toggled={toggled}>\r\n      <InputWrapper>\r\n        <StyledInput\r\n          ref={inputEl}\r\n          value={value}\r\n          onChange={onChange}\r\n          placeholder={t('Search Vaults')}\r\n          onBlur={() => setToggled(false)}\r\n        />\r\n      </InputWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default SearchInput\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport { ArrowDropDownIcon, Text } from 'archerswap-uikit'\r\n\r\nconst DropDownHeader = styled.div`\r\n  width: 100%;\r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0px 16px;\r\n  box-shadow: ${({ theme }) => theme.shadows.inset};\r\n  border: 1px solid ${({ theme }) => theme.colors.borderColor};\r\n  border-radius: 16px;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  transition: border-radius 0.15s;\r\n`\r\n\r\nconst DropDownListContainer = styled.div`\r\n  min-width: 136px;\r\n  height: 0;\r\n  position: absolute;\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.background};\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n  transition: transform 0.15s, opacity 0.15s;\r\n  transform: scaleY(0);\r\n  transform-origin: top;\r\n  opacity: 0;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n`\r\n\r\nconst DropDownContainer = styled.div<{ isOpen: boolean; width: number; height: number }>`\r\n  cursor: pointer;\r\n  width: ${({ width }) => width}px;\r\n  position: relative;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  height: 40px;\r\n  min-width: 136px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n\r\n  ${(props) =>\r\n    props.isOpen &&\r\n    css`\r\n      ${DropDownHeader} {\r\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n        border-radius: 16px 16px 0 0;\r\n      }\r\n\r\n      ${DropDownListContainer} {\r\n        height: auto;\r\n        transform: scaleY(1);\r\n        opacity: 1;\r\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        border-top-width: 0;\r\n        border-radius: 0 0 16px 16px;\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n      }\r\n    `}\r\n\r\n  svg {\r\n    position: absolute;\r\n    right: 16px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n  }\r\n`\r\n\r\nconst DropDownList = styled.ul`\r\n  padding: 0;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n`\r\n\r\nconst ListItem = styled.li`\r\n  list-style: none;\r\n  padding: 8px 16px;\r\n  &:hover {\r\n    background: ${({ theme }) => theme.colors.inputSecondary};\r\n  }\r\n`\r\n\r\nexport interface SelectProps {\r\n  options: OptionProps[]\r\n  onChange?: (option: OptionProps) => void\r\n}\r\n\r\nexport interface OptionProps {\r\n  label: string\r\n  value: any\r\n}\r\n\r\nconst Select: React.FunctionComponent<SelectProps> = ({ options, onChange }) => {\r\n  const containerRef = useRef(null)\r\n  const dropdownRef = useRef(null)\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [selectedOption, setSelectedOption] = useState(options[0])\r\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 })\r\n\r\n  const toggling = () => setIsOpen(!isOpen)\r\n\r\n  const onOptionClicked = (option: OptionProps) => () => {\r\n    setSelectedOption(option)\r\n    setIsOpen(false)\r\n\r\n    if (onChange) {\r\n      onChange(option)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    setContainerSize({\r\n      width: dropdownRef.current.offsetWidth, // Consider border\r\n      height: dropdownRef.current.offsetHeight,\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <DropDownContainer isOpen={isOpen} ref={containerRef} {...containerSize}>\r\n      {containerSize.width !== 0 && (\r\n        <DropDownHeader onClick={toggling}>\r\n          <Text>{selectedOption.label}</Text>\r\n        </DropDownHeader>\r\n      )}\r\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\r\n      <DropDownListContainer>\r\n        <DropDownList ref={dropdownRef}>\r\n          {options.map((option) =>\r\n            option.label !== selectedOption.label ? (\r\n              <ListItem onClick={onOptionClicked(option)} key={option.label}>\r\n                <Text>{option.label}</Text>\r\n              </ListItem>\r\n            ) : null,\r\n          )}\r\n        </DropDownList>\r\n      </DropDownListContainer>\r\n    </DropDownContainer>\r\n  )\r\n}\r\n\r\nexport default Select\r\n","import React, { useEffect, useCallback, useState } from 'react'\r\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { RowType, Toggle, Text } from 'archerswap-uikit'\r\nimport styled from 'styled-components'\r\nimport axios from 'axios'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { useValuts, usePriceBowUsd, useGetApiPrices } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { fetchVaultUserDataAsync } from 'state/actions'\r\nimport { Vault } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getVaultApy } from 'utils/apy'\r\nimport { orderBy } from 'lodash'\r\n// import { START_TIMESTAMP } from 'config'\r\n\r\nimport VaultCard, { VaultWithStakedValue } from './components/VaultCard/VaultCard'\r\nimport Table from './components/VaultTable/VaultTable'\r\nimport Banner from '../../components/Banner'\r\nimport VaultTabButtons from './components/VaultTabButtons'\r\nimport SearchInput from './components/SearchInput'\r\nimport { RowProps } from './components/VaultTable/Row'\r\n// import ToggleView from './components/ToggleView/ToggleView'\r\nimport { DesktopColumnSchema, ViewMode } from './components/types'\r\nimport Select, { OptionProps } from './components/Select/Select'\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst Background = styled.div`\r\n  // width: 100%;\r\n  // background-image: url('/images/assets/bgf.svg');\r\n  // background-repeat: no-repeat;\r\n  // background-position: top 80px right;\r\n`\r\n\r\nconst Vaults: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const { t } = useTranslation()\r\n  const vaultsLP = useValuts()\r\n  const bowPrice = usePriceBowUsd()\r\n  const [query, setQuery] = useState('')\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  const [viewMode, setViewMode] = useState(ViewMode.TABLE)\r\n  const { account } = useWeb3React()\r\n  const web3 = useWeb3()\r\n  const [sortOption, setSortOption] = useState(t('hot'))\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  const [providerOption, setProviderOption] = useState('All')\r\n  const prices = useGetApiPrices()\r\n\r\n  // const { blockNumber } = useBlock()\r\n\r\n  const dispatch = useDispatch()\r\n  const { fastRefresh, slowRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchVaultUserDataAsync(account, web3))\r\n    }\r\n  }, [account, web3, dispatch, fastRefresh])\r\n  const [stackedOnly, setStackedOnly] = useState(false)\r\n\r\n  const [dailyVolumeUSD, setDailyVolumeUSD] = useState([])\r\n\r\n  useEffect(() => {\r\n    const coingeckoApiUrl = 'https://api.coingecko.com/api/v3/exchanges/archerswap'\r\n    const fetch = async () => {\r\n      const response = await axios.get(coingeckoApiUrl)\r\n      if (response && response.status) {\r\n        setDailyVolumeUSD(\r\n          response.data.tickers.map((ticker: any) => ({\r\n            base: ticker.base,\r\n            target: ticker.target,\r\n            volume: ticker.converted_volume.usd,\r\n          })),\r\n        )\r\n      }\r\n    }\r\n\r\n    fetch()\r\n  }, [slowRefresh])\r\n\r\n  const calculateAPY = (vault) => {\r\n    const quoteTokenPriceUsd = prices[vault.quoteToken.symbol.toLowerCase()]\r\n    const totalFarmLiquidity = new BigNumber(vault.lpTotalMcInQuoteToken).times(quoteTokenPriceUsd)\r\n    const rewardPrice = bowPrice\r\n    const apy = getVaultApy(vault.poolWeight, rewardPrice, totalFarmLiquidity)\r\n    return apy\r\n  }\r\n\r\n  const activeVaults = vaultsLP.filter((vault) => calculateAPY(vault) !== 0)\r\n  const inactiveVaults = vaultsLP.filter((vault) => calculateAPY(vault) === 0)\r\n\r\n  const stackedOnlyVaults = activeVaults.filter(\r\n    (vault) => vault.userData && new BigNumber(vault.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const sortVaults = (vaults: VaultWithStakedValue[]): VaultWithStakedValue[] => {\r\n    switch (sortOption) {\r\n      case 'apr':\r\n        return orderBy(vaults, 'apy', 'desc')\r\n      // case 'multiplier':\r\n      //   return orderBy(\r\n      //     vaults,\r\n      //     (vault: VaultWithStakedValue) => (vault.multiplier ? Number(vault.multiplier.slice(0, -1)) : 0),\r\n      //     'desc',\r\n      //   )\r\n      case 'earned':\r\n        return orderBy(vaults, (vault: VaultWithStakedValue) => (vault.userData ? vault.userData.earnings : 0), 'desc')\r\n      case 'liquidity':\r\n        return orderBy(vaults, (vault: VaultWithStakedValue) => Number(vault.liquidity), 'desc')\r\n      default:\r\n        return vaults\r\n    }\r\n  }\r\n\r\n  const vaultsList = useCallback(\r\n    (vaultsToDisplay: Vault[]): VaultWithStakedValue[] => {\r\n      let vaultsToDisplayWithAPY: VaultWithStakedValue[] = vaultsToDisplay.map((vault) => {\r\n        if (!vault.lpTotalMcInQuoteToken || !prices) {\r\n          return vault\r\n        }\r\n\r\n        const quoteTokenPriceUsd = prices[vault.quoteToken.symbol.toLowerCase()]\r\n        let totalFarmLiquidity = new BigNumber(vault.lpTotalMcInQuoteToken).times(quoteTokenPriceUsd)\r\n        let totalLiquidity = new BigNumber(vault.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\r\n        const lpPrice = new BigNumber(totalLiquidity).div(vault.vaultBalance)\r\n        if (vault.lpSymbol === 'BOW') {\r\n          totalLiquidity = new BigNumber(vault.vaultBalance).times(prices[vault.lpSymbol.toLowerCase()])\r\n          totalFarmLiquidity = new BigNumber(vault.tokenBalanceMC).times(prices[vault.lpSymbol.toLowerCase()])\r\n        }\r\n        const rewardPrice = prices.bow\r\n        const apy = getVaultApy(vault.poolWeight, rewardPrice, totalFarmLiquidity, vault.provider)\r\n        const volumeObj = dailyVolumeUSD.filter(\r\n          (e) =>\r\n            (e.base.toLowerCase() === vault.token.address[1116].toLowerCase() &&\r\n              e.target.toLowerCase() === vault.quoteToken.address[1116].toLowerCase()) ||\r\n            (e.base.toLowerCase() === vault.quoteToken.address[1116].toLowerCase() &&\r\n              e.target.toLowerCase() === vault.token.address[1116].toLowerCase()),\r\n        )[0]\r\n        let feeApr = 0\r\n        if (volumeObj && quoteTokenPriceUsd && quoteTokenPriceUsd.gt(0)) {\r\n          feeApr =\r\n            (Number(volumeObj.volume) /\r\n              Number(new BigNumber(vault.quoteTokenAmount).times(2).times(quoteTokenPriceUsd).toString())) *\r\n            365 *\r\n            100 *\r\n            0.0005\r\n        }\r\n        return { ...vault, apy: apy + feeApr, liquidity: totalLiquidity, lpPrice }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = query.toLowerCase()\r\n        vaultsToDisplayWithAPY = vaultsToDisplayWithAPY.filter((vault: VaultWithStakedValue) => {\r\n          if (vault.lpSymbol.toLowerCase().includes(lowercaseQuery)) {\r\n            return true\r\n          }\r\n\r\n          return false\r\n        })\r\n      }\r\n      return vaultsToDisplayWithAPY\r\n    },\r\n    [prices, query, dailyVolumeUSD],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const isActive = !pathname.includes('history')\r\n  let vaultsStaked = []\r\n  if (isActive) {\r\n    vaultsStaked = stackedOnly ? vaultsList(stackedOnlyVaults) : vaultsList(activeVaults)\r\n  } else {\r\n    vaultsStaked = vaultsList(inactiveVaults)\r\n  }\r\n\r\n  vaultsStaked = sortVaults(vaultsStaked)\r\n  vaultsStaked = vaultsStaked.filter((v) => providerOption === 'All' || v.provider === providerOption)\r\n  const rowData = vaultsStaked.map((vault) => {\r\n    const { quoteToken, token } = vault\r\n    const lpLabel = vault.lpSymbol && vault.lpSymbol.split(' ')[0].toUpperCase().replace('ARCHER', '')\r\n    const rewardPrice = bowPrice\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: vault.apy && vault.apy.toLocaleString('en-US', { maximumFractionDigits: 2 }),\r\n        // multiplier: vault.multiplier,\r\n        lpLabel,\r\n        quoteTokenAdresses: quoteToken.address,\r\n        quoteTokenSymbol: quoteToken.symbol,\r\n        tokenAddresses: token.address,\r\n        cakePrice: rewardPrice,\r\n        originalValue: vault.apy,\r\n      },\r\n      farm: {\r\n        image: vault.lpSymbol.split(' ')[0].toLocaleLowerCase(),\r\n        label: lpLabel,\r\n        pid: vault.pid,\r\n        provider: vault.provider,\r\n      },\r\n      earned: {\r\n        earnings: vault.userData ? getBalanceNumber(new BigNumber(vault.userData.earnings)) : null,\r\n        pid: vault.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: vault.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: vault.provider,\r\n      },\r\n      details: vault,\r\n    }\r\n\r\n    return row\r\n  })\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} />\r\n    }\r\n    return (\r\n      <div>\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {vaultsStaked.map((vault) => (\r\n              <VaultCard key={vault.pid} vault={vault} bowPrice={bowPrice} account={account} removed={false} />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {vaultsStaked.map((vault) => (\r\n              <VaultCard key={vault.pid} vault={vault} bowPrice={bowPrice} account={account} removed />\r\n            ))}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  // const handleFilterProviderChange = (option: OptionProps): void => {\r\n  //   setProviderOption(option.value)\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <Banner\r\n        src=\"/images/assets/banners/vault_banner.png\"\r\n        mobileSrc=\"/images/assets/banners/mobile_vault_banner.png\"\r\n        alt=\"farm_banner\"\r\n        title={t('Vaults')}\r\n        text={`${t(\r\n          'Deposit LP or single tokens to automatically grow your deposits. There is a 0.1% withdrawal fee on all vaults.',\r\n        )}.`}\r\n      />\r\n\r\n      <Background>\r\n        <Page>\r\n          {/* {blockNumber !== 0 && blockNumber <= START_TIMESTAMP && (\r\n            <NotifyContainer>\r\n              <Heading as=\"h1\" size=\"xl\" color=\"secondary\" mb=\"24px\">\r\n                {t('Bow Farming Countdown')}\r\n              </Heading>\r\n              <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n                <Text fontSize=\"20px\">{t(`BOW Farming Starts On Block ${START_TIMESTAMP}`)}</Text>\r\n                <Text fontSize=\"20px\">{`${START_TIMESTAMP - blockNumber} blocks left until BOW Farming`}</Text>\r\n              </Flex>\r\n            </NotifyContainer>\r\n          )} */}\r\n          <ControlContainer>\r\n            <ViewControls>\r\n              {/* <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} /> */}\r\n              <ToggleWrapper>\r\n                <Toggle checked={stackedOnly} onChange={() => setStackedOnly(!stackedOnly)} scale=\"sm\" />\r\n                <Text> {t('Staked only')}</Text>\r\n              </ToggleWrapper>\r\n              <VaultTabButtons />\r\n            </ViewControls>\r\n            <FilterContainer>\r\n              <LabelWrapper>\r\n                <Text color=\"textSubtle\" textTransform=\"uppercase\">\r\n                  {t('Sort by')}\r\n                </Text>\r\n                <Select\r\n                  options={[\r\n                    {\r\n                      label: t('Hot'),\r\n                      value: 'hot',\r\n                    },\r\n                    {\r\n                      label: t('APY'),\r\n                      value: 'apr',\r\n                    },\r\n                    {\r\n                      label: t('Deposited + Earned'),\r\n                      value: 'earned',\r\n                    },\r\n                    {\r\n                      label: t('Liquidity'),\r\n                      value: 'liquidity',\r\n                    },\r\n                  ]}\r\n                  onChange={handleSortOptionChange}\r\n                />\r\n              </LabelWrapper>\r\n              {/* <LabelWrapper>\r\n                <Text>{t('Filter by')}</Text>\r\n                <Select\r\n                  options={[\r\n                    {\r\n                      label: 'All',\r\n                      value: 'All',\r\n                    },\r\n                    {\r\n                      label: 'Archerswap',\r\n                      value: 'Archerswap',\r\n                    },\r\n                  ]}\r\n                  onChange={handleFilterProviderChange}\r\n                />\r\n              </LabelWrapper> */}\r\n              <LabelWrapper style={{ marginLeft: 16 }}>\r\n                <Text color=\"textSubtle\" textTransform=\"uppercase\">\r\n                  {t('Search')}\r\n                </Text>\r\n                <SearchInput onChange={handleChangeQuery} value={query} />\r\n              </LabelWrapper>\r\n            </FilterContainer>\r\n          </ControlContainer>\r\n          {renderContent()}\r\n        </Page>\r\n      </Background>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Vaults\r\n"],"sourceRoot":""}