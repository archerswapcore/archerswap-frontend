{"version":3,"sources":["hooks/useNftMarketplace.ts"],"names":["useNumTokenListings","erc721Address","useState","data","setData","marketplaceContract","useMarketplace","getTokenListings","useCallback","a","methods","numTokenListings","call","res","useEffect","useTokenListings","total","_tokenListing","_multicallMethods","i","push","address","getNftMarketplaceAddress","name","params","multicall","nftMarketplaceABI","map","t","filter","r","BigNumber","value","isZero","useTokenListing","tokenId","isLoading","getTokenListing","undefined","useGetMyTokenIds","isShowMyNft","account","useWeb3React","nftTokenContract","useERC721","getMyTokenIds","balanceOf","balance","erc721ABI","multicallData","id","toString","useNumTokenWithBids","numTokenWithBids","useTokenHighestBids","_tokenHighestBids","useGetOwnerOfToken","ownerOf","useGetMyCollections","collections","getMyCollections","collection","c","idx","_","useGetServiceFee","getServiceFee","serviceFee","toNumber","useGetRoyalty","getRoyalty","royalty","feeFraction","useGetTokenBids","getTokenBids","bidder","useGetBidderTokenBid","getBidderTokenBid","useWithdrawBidToken","setIsLoading","isWithdrawBid","setIsWithdrawBid","withdrawBidForToken","send","from","tx","useAcceptBidToken","isAcceptBid","setIsAcceptBid","acceptBidForToken","useGetIsApprovedForAll","isApprovedForAll","useApproveNFT","options","setApprovalForAll","useListToken","isListed","setIsListed","price","expireTimestamp","listToken","times","useGetAllowanceWCORE","isAllowed","setIsAllowed","tokenContract","useWcore","getAllowanceWCORE","allowance","useConvertToWCORE","isConverted","setIsConverted","amount","deposit","useApproveWCORE","isWcoreApproved","setIsWcoreApproved","approve","ethers","constants","MaxUint256","useBidToken","isPlaceBid","setIsPlaceBid","enterBidForToken","useBuyToken","_amount","buyToken","useDelistToken","isDelisted","setIsDelisted","delistToken","useTransferToken","isTransferred","setTransferred","to","safeTransferFrom","useNormalTransferToken","transferFrom"],"mappings":"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","file":"static/js/4.587f52f8.chunk.js","sourcesContent":["import { useEffect, useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { ethers } from 'ethers'\r\nimport multicall from 'utils/multicall'\r\nimport nftMarketplaceABI from 'config/abi/nftMarketplace.json'\r\nimport erc721ABI from 'config/abi/erc721.json'\r\nimport { getNftMarketplaceAddress } from 'utils/addressHelpers'\r\nimport { useWcore, useERC721, useMarketplace } from './useContract'\r\n\r\n// GET Listed Tokens\r\n\r\nexport const useNumTokenListings = (erc721Address: string) => {\r\n  const [data, setData] = useState(0)\r\n  // const { account } = useWeb3React()\r\n  const marketplaceContract = useMarketplace()\r\n\r\n  const getTokenListings = useCallback(async () => {\r\n    const res = await marketplaceContract.methods.numTokenListings(erc721Address).call()\r\n    setData(res)\r\n  }, [marketplaceContract, erc721Address])\r\n\r\n  useEffect(() => {\r\n    if (erc721Address) {\r\n      getTokenListings()\r\n    }\r\n  }, [erc721Address, getTokenListings])\r\n\r\n  return data\r\n}\r\n\r\nexport const useTokenListings = (erc721Address: string, total: any) => {\r\n  const [data, setData] = useState<any>([])\r\n\r\n  const getTokenListings = useCallback(async () => {\r\n    const _tokenListing: any = []\r\n    const _multicallMethods = []\r\n    for (let i = 0; i < total; i += 128) {\r\n      _multicallMethods.push({\r\n        address: getNftMarketplaceAddress(),\r\n        name: 'getTokenListings',\r\n        params: [erc721Address, i, 128],\r\n      })\r\n    }\r\n    const multicallData = await multicall(nftMarketplaceABI, _multicallMethods)\r\n    multicallData.map((t: any) => {\r\n      _tokenListing.push(...t[0].filter((r: any) => !new BigNumber(r.value).isZero()))\r\n      return true\r\n    })\r\n\r\n    setData([..._tokenListing])\r\n  }, [erc721Address, total])\r\n\r\n  useEffect(() => {\r\n    if (erc721Address && total) {\r\n      getTokenListings()\r\n    }\r\n  }, [erc721Address, total, getTokenListings])\r\n\r\n  return data\r\n}\r\n\r\n// Get Listed Token Info\r\nexport const useTokenListing = (erc721Address: string, tokenId: any, isLoading: any) => {\r\n  const [data, setData] = useState<any>({})\r\n  const marketplaceContract = useMarketplace()\r\n\r\n  const getTokenListing = useCallback(async () => {\r\n    const res: any = await marketplaceContract.methods.getTokenListing(erc721Address, tokenId).call()\r\n    setData(res)\r\n  }, [marketplaceContract, erc721Address, tokenId])\r\n\r\n  useEffect(() => {\r\n    if (erc721Address && tokenId !== undefined) {\r\n      getTokenListing()\r\n    }\r\n  }, [erc721Address, tokenId, isLoading, getTokenListing])\r\n\r\n  return data\r\n}\r\n\r\n// Get My NFT Tokens\r\n\r\nexport const useGetMyTokenIds = (erc721Address: string, isShowMyNft: string) => {\r\n  const { account } = useWeb3React()\r\n  const [data, setData] = useState<any>([])\r\n  const nftTokenContract = useERC721(erc721Address)\r\n\r\n  useEffect(() => {\r\n    const getMyTokenIds = async () => {\r\n      const balance: any = await nftTokenContract.methods.balanceOf(account).call()\r\n      const _multicallMethods = []\r\n      for (let i = 0; i < +balance; i++) {\r\n        _multicallMethods.push({\r\n          address: erc721Address,\r\n          name: 'tokenOfOwnerByIndex',\r\n          params: [account, i],\r\n        })\r\n      }\r\n      const multicallData = await multicall(erc721ABI, _multicallMethods)\r\n      setData(multicallData.map((id) => id.toString(10)))\r\n    }\r\n    if (nftTokenContract && erc721Address && isShowMyNft === 'on') {\r\n      getMyTokenIds()\r\n    }\r\n  }, [account, nftTokenContract, erc721Address, isShowMyNft])\r\n\r\n  return data\r\n}\r\n\r\n// GET tokens which got offer\r\n\r\nexport const useNumTokenWithBids = () => {\r\n  const [data, setData] = useState(0)\r\n  const marketplaceContract = useMarketplace()\r\n\r\n  const getTokenWithBids = useCallback(\r\n    async (erc721Address: string) => {\r\n      if (erc721Address) {\r\n        const res = await marketplaceContract.methods.numTokenWithBids(erc721Address).call()\r\n        setData(res)\r\n      }\r\n    },\r\n    [marketplaceContract],\r\n  )\r\n\r\n  return [data, getTokenWithBids]\r\n}\r\n\r\nexport const useTokenHighestBids = () => {\r\n  const [data, setData] = useState<any>([])\r\n\r\n  const getTokenHighestBids = useCallback(async (erc721Address: any, total: any) => {\r\n    if (erc721Address && total) {\r\n      const _tokenHighestBids: any = []\r\n      const _multicallMethods = []\r\n      for (let i = 0; i < total; i += 64) {\r\n        _multicallMethods.push({\r\n          address: getNftMarketplaceAddress(),\r\n          name: 'getTokenHighestBids',\r\n          params: [erc721Address, i, 128],\r\n        })\r\n      }\r\n      const multicallData = await multicall(nftMarketplaceABI, _multicallMethods)\r\n\r\n      multicallData.map((t: any) => {\r\n        _tokenHighestBids.push(...t[0].filter((r: any) => !new BigNumber(r.value).isZero()))\r\n        return true\r\n      })\r\n\r\n      setData([..._tokenHighestBids])\r\n    }\r\n  }, [])\r\n\r\n  return [data, getTokenHighestBids]\r\n}\r\n\r\n// Get Token owner address\r\n\r\nexport const useGetOwnerOfToken = (erc721Address: string) => {\r\n  const [data, setData] = useState<any>('')\r\n\r\n  const nftTokenContract = useERC721(erc721Address)\r\n\r\n  const getOwnerOfToken = useCallback(\r\n    async (tokenId: string) => {\r\n      if (nftTokenContract && tokenId !== undefined) {\r\n        const res: any = await nftTokenContract.methods.ownerOf(tokenId).call()\r\n        setData(res)\r\n      }\r\n    },\r\n    [nftTokenContract],\r\n  )\r\n\r\n  return [data, getOwnerOfToken]\r\n}\r\n// Get My NFTs Collections\r\nexport const useGetMyCollections = (collections: any = []) => {\r\n  const [data, setData] = useState([])\r\n  const { account } = useWeb3React()\r\n\r\n  const getMyCollections = useCallback(async () => {\r\n    if (!account) return\r\n    const _multicallMethods = []\r\n    collections.map(async (collection: any) => {\r\n      _multicallMethods.push({\r\n        address: collection.address,\r\n        name: 'balanceOf',\r\n        params: [account],\r\n      })\r\n    })\r\n\r\n    const multicallData = await multicall(erc721ABI, _multicallMethods)\r\n\r\n    setData(\r\n      collections\r\n        .map((c: any, idx: any) => {\r\n          return { ...c, balance: multicallData[idx].toString(10) }\r\n        })\r\n        .filter((_: any, idx: any) => !new BigNumber(multicallData[idx]).isZero()),\r\n    )\r\n  }, [account, collections])\r\n\r\n  useEffect(() => {\r\n    getMyCollections()\r\n  }, [getMyCollections])\r\n\r\n  return data\r\n}\r\n\r\n// GET Service Fee\r\nexport const useGetServiceFee = () => {\r\n  const [data, setData] = useState(0)\r\n  const marketplaceContract = useMarketplace()\r\n\r\n  const getServiceFee = useCallback(async () => {\r\n    const res = await marketplaceContract.methods.serviceFee().call()\r\n    setData(new BigNumber(((res || 0) * 100) / 1000).toNumber())\r\n  }, [marketplaceContract])\r\n\r\n  useEffect(() => {\r\n    getServiceFee()\r\n  }, [getServiceFee])\r\n\r\n  return data\r\n}\r\n\r\n// GET royalty\r\nexport const useGetRoyalty = (erc721Address: string) => {\r\n  const [data, setData] = useState(0)\r\n  const marketplaceContract = useMarketplace()\r\n\r\n  const getRoyalty = useCallback(async () => {\r\n    const res = await marketplaceContract.methods.royalty(erc721Address).call()\r\n    setData(new BigNumber((res.feeFraction * 100) / 1000).toNumber())\r\n  }, [erc721Address, marketplaceContract])\r\n\r\n  useEffect(() => {\r\n    if (erc721Address) {\r\n      getRoyalty()\r\n    }\r\n  }, [erc721Address, getRoyalty])\r\n\r\n  return data\r\n}\r\n\r\n// Get Token Bids\r\n\r\nexport const useGetTokenBids = () => {\r\n  const [data, setData] = useState([])\r\n  const marketplaceContract = useMarketplace()\r\n\r\n  const getTokenBids = useCallback(\r\n    async (erc721Address: string, tokenId: any) => {\r\n      if (erc721Address && tokenId !== undefined) {\r\n        const res = await marketplaceContract.methods.getTokenBids(erc721Address, tokenId).call()\r\n        setData((res || []).filter((r: any) => r.bidder !== '0x0000000000000000000000000000000000000000'))\r\n      }\r\n    },\r\n    [marketplaceContract],\r\n  )\r\n\r\n  return [data, getTokenBids]\r\n}\r\n\r\n// Get BidderToken\r\n\r\nexport const useGetBidderTokenBid = () => {\r\n  const [data, setData] = useState<any>({})\r\n  const { account } = useWeb3React()\r\n  const marketplaceContract = useMarketplace()\r\n\r\n  const getBidderTokenBid = useCallback(\r\n    async (erc721Address: any, tokenId: any) => {\r\n      if (erc721Address && tokenId !== undefined && account) {\r\n        const res: any = await marketplaceContract.methods.getBidderTokenBid(erc721Address, tokenId, account).call()\r\n        setData(res)\r\n      }\r\n    },\r\n    [account, marketplaceContract],\r\n  )\r\n\r\n  return [data, getBidderTokenBid]\r\n}\r\n\r\n// Withdraw Bid Token\r\nexport const useWithdrawBidToken = () => {\r\n  const [isLoading, setIsLoading] = useState<any>(false)\r\n  const [isWithdrawBid, setIsWithdrawBid] = useState<any>(false)\r\n  const marketplaceContract = useMarketplace()\r\n\r\n  const { account } = useWeb3React()\r\n\r\n  const withdrawBidToken = useCallback(\r\n    async (erc721Address: string, tokenId: string) => {\r\n      try {\r\n        setIsLoading(true)\r\n        const tx = await marketplaceContract.methods.withdrawBidForToken(erc721Address, tokenId).send({ from: account })\r\n        setIsLoading(false)\r\n        if (tx) {\r\n          setIsWithdrawBid(true)\r\n        }\r\n        return tx\r\n      } catch (e) {\r\n        setIsLoading(false)\r\n        return false\r\n      }\r\n    },\r\n    [marketplaceContract, account],\r\n  )\r\n\r\n  return [isLoading, isWithdrawBid, withdrawBidToken]\r\n}\r\n\r\n// Accept Bid Token\r\nexport const useAcceptBidToken = () => {\r\n  const [isLoading, setIsLoading] = useState<any>(false)\r\n  const [isAcceptBid, setIsAcceptBid] = useState<any>(false)\r\n  const marketplaceContract = useMarketplace()\r\n\r\n  const { account } = useWeb3React()\r\n\r\n  const acceptBidToken = useCallback(\r\n    async (erc721Address: string, tokenId: string, bidder: string, value: string) => {\r\n      try {\r\n        setIsLoading(true)\r\n        const tx = await marketplaceContract.methods\r\n          .acceptBidForToken(erc721Address, tokenId, bidder, value)\r\n          .send({ from: account })\r\n        setIsLoading(false)\r\n        if (tx) {\r\n          setIsAcceptBid(true)\r\n        }\r\n        return tx\r\n      } catch (e) {\r\n        setIsLoading(false)\r\n        return false\r\n      }\r\n    },\r\n    [marketplaceContract, account],\r\n  )\r\n\r\n  return [isLoading, isAcceptBid, acceptBidToken]\r\n}\r\n\r\nexport const useGetIsApprovedForAll = (erc721Address: any) => {\r\n  const [data, setData] = useState<any>(false)\r\n  const nftTokenContract = useERC721(erc721Address)\r\n  const { account } = useWeb3React()\r\n\r\n  const getIsApprovedForAll = useCallback(async () => {\r\n    if (nftTokenContract) {\r\n      const res: any = await nftTokenContract.methods.isApprovedForAll(account, getNftMarketplaceAddress()).call()\r\n      setData(res)\r\n    }\r\n  }, [account, nftTokenContract])\r\n  return [data, getIsApprovedForAll]\r\n}\r\n\r\n// Get Approve\r\nexport const useApproveNFT = (erc721Address: string) => {\r\n  const [isLoading, setIsLoading] = useState<any>(false)\r\n\r\n  const { account } = useWeb3React()\r\n  const nftTokenContract = useERC721(erc721Address)\r\n\r\n  const approveNFT = useCallback(async () => {\r\n    if (!account) return false\r\n    try {\r\n      setIsLoading(true)\r\n      const options = {\r\n        from: account,\r\n      }\r\n      const tx = await nftTokenContract.methods.setApprovalForAll(getNftMarketplaceAddress(), true).send(options)\r\n      setIsLoading(false)\r\n      return tx\r\n    } catch (e) {\r\n      setIsLoading(false)\r\n      return false\r\n    }\r\n  }, [nftTokenContract, account])\r\n\r\n  return [isLoading, approveNFT]\r\n}\r\n\r\n// List token\r\nexport const useListToken = () => {\r\n  const [isLoading, setIsLoading] = useState<any>(false)\r\n  const [isListed, setIsListed] = useState<any>(false)\r\n  const marketplaceContract = useMarketplace()\r\n\r\n  const { account } = useWeb3React()\r\n\r\n  const listToken = useCallback(\r\n    async (erc721Address: string, tokenId: string, price: any, expireTimestamp: any) => {\r\n      try {\r\n        setIsLoading(true)\r\n        const tx = await marketplaceContract.methods\r\n          .listToken(erc721Address, tokenId, new BigNumber(price).times(10 ** 18).toString(10), expireTimestamp)\r\n          .send({ from: account })\r\n        setIsLoading(false)\r\n        if (tx) {\r\n          setIsListed(true)\r\n        }\r\n        return tx\r\n      } catch (e) {\r\n        setIsLoading(false)\r\n        return false\r\n      }\r\n    },\r\n    [marketplaceContract, account],\r\n  )\r\n\r\n  return [isLoading, isListed, listToken]\r\n}\r\n\r\n// Get WCORE Allowance\r\nexport const useGetAllowanceWCORE = () => {\r\n  const [isAllowed, setIsAllowed] = useState<any>(false)\r\n  const tokenContract = useWcore()\r\n  const { account } = useWeb3React()\r\n\r\n  const getAllowanceWCORE = useCallback(async () => {\r\n    const allowance = await tokenContract.methods.allowance(account, getNftMarketplaceAddress()).call()\r\n    if (!new BigNumber(allowance).isZero()) {\r\n      setIsAllowed(true)\r\n    }\r\n  }, [account, tokenContract])\r\n\r\n  useEffect(() => {\r\n    if (account) {\r\n      getAllowanceWCORE()\r\n    }\r\n  }, [account, getAllowanceWCORE])\r\n\r\n  return [isAllowed]\r\n}\r\n\r\n// Convert CORE to WCORE\r\nexport const useConvertToWCORE = () => {\r\n  const [isLoading, setIsLoading] = useState<any>(false)\r\n  const [isConverted, setIsConverted] = useState<any>(false)\r\n\r\n  const tokenContract = useWcore()\r\n  const { account } = useWeb3React()\r\n\r\n  const convertToWCORE = useCallback(\r\n    async (amount: any) => {\r\n      try {\r\n        setIsLoading(true)\r\n        const options = {\r\n          from: account,\r\n          value: new BigNumber(amount).times(10 ** 18).toString(10),\r\n        }\r\n        const tx = await tokenContract.methods.deposit().send(options)\r\n        setIsLoading(false)\r\n        if (tx) {\r\n          setIsConverted(true)\r\n        }\r\n        return tx\r\n      } catch (e) {\r\n        // console.log('e', e)\r\n        setIsLoading(false)\r\n        return false\r\n      }\r\n    },\r\n    [tokenContract, account],\r\n  )\r\n\r\n  return [isLoading, isConverted, convertToWCORE]\r\n}\r\n\r\n// Approve WCORE\r\nexport const useApproveWCORE = () => {\r\n  const [isLoading, setIsLoading] = useState<any>(false)\r\n  const [isWcoreApproved, setIsWcoreApproved] = useState<any>(false)\r\n\r\n  const tokenContract = useWcore()\r\n  const { account } = useWeb3React()\r\n\r\n  const approveWCORE = useCallback(async () => {\r\n    try {\r\n      setIsLoading(true)\r\n      const options = {\r\n        from: account,\r\n      }\r\n      const tx = await tokenContract.methods\r\n        .approve(getNftMarketplaceAddress(), ethers.constants.MaxUint256)\r\n        .send(options)\r\n      setIsLoading(false)\r\n      if (tx) {\r\n        setIsWcoreApproved(true)\r\n      }\r\n      return tx\r\n    } catch (e) {\r\n      setIsLoading(false)\r\n      return false\r\n    }\r\n  }, [tokenContract, account])\r\n\r\n  return [isLoading, isWcoreApproved, approveWCORE]\r\n}\r\n\r\n// Bid to token\r\nexport const useBidToken = () => {\r\n  const [isLoading, setIsLoading] = useState<any>(false)\r\n  const [isPlaceBid, setIsPlaceBid] = useState<any>(false)\r\n  const marketplaceContract = useMarketplace()\r\n\r\n  const { account } = useWeb3React()\r\n\r\n  const bidToken = useCallback(\r\n    async (erc721Address: string, tokenId: string, price: any, expireTimestamp: any) => {\r\n      try {\r\n        setIsLoading(true)\r\n        const tx = await marketplaceContract.methods\r\n          .enterBidForToken(erc721Address, tokenId, new BigNumber(price).times(10 ** 18).toString(10), expireTimestamp)\r\n          .send({ from: account })\r\n        setIsLoading(false)\r\n        if (tx) {\r\n          setIsPlaceBid(true)\r\n        }\r\n        return tx\r\n      } catch (e) {\r\n        setIsLoading(false)\r\n        return false\r\n      }\r\n    },\r\n    [marketplaceContract, account],\r\n  )\r\n\r\n  return [isLoading, isPlaceBid, bidToken]\r\n}\r\n\r\n// Buy Token\r\nexport const useBuyToken = () => {\r\n  const [isLoading, setIsLoading] = useState<any>(false)\r\n  const marketplaceContract = useMarketplace()\r\n\r\n  const { account } = useWeb3React()\r\n\r\n  const buyToken = useCallback(\r\n    async (amount: any, erc721Address: string, tokenId: string) => {\r\n      if (!account) return false\r\n      try {\r\n        setIsLoading(true)\r\n        const _amount = new BigNumber(amount).times(10 ** 18).toString(10)\r\n        const options = {\r\n          from: account,\r\n          value: _amount,\r\n        }\r\n        const tx = await marketplaceContract.methods.buyToken(erc721Address, tokenId).send(options)\r\n        setIsLoading(false)\r\n        return tx\r\n      } catch (e) {\r\n        setIsLoading(false)\r\n        return false\r\n      }\r\n    },\r\n    [marketplaceContract, account],\r\n  )\r\n\r\n  return [isLoading, buyToken]\r\n}\r\n\r\n// Delist token\r\nexport const useDelistToken = () => {\r\n  const [isLoading, setIsLoading] = useState<any>(false)\r\n  const [isDelisted, setIsDelisted] = useState<any>(false)\r\n  const marketplaceContract = useMarketplace()\r\n\r\n  const { account } = useWeb3React()\r\n\r\n  const deListToken = useCallback(\r\n    async (erc721Address: string, tokenId: string) => {\r\n      try {\r\n        setIsLoading(true)\r\n        const tx = await marketplaceContract.methods.delistToken(erc721Address, tokenId).send({ from: account })\r\n        setIsLoading(false)\r\n        if (tx) {\r\n          setIsDelisted(true)\r\n        }\r\n        return tx\r\n      } catch (e) {\r\n        setIsLoading(false)\r\n        return false\r\n      }\r\n    },\r\n    [marketplaceContract, account],\r\n  )\r\n\r\n  return [isLoading, isDelisted, deListToken]\r\n}\r\n\r\n// Transfer token\r\nexport const useTransferToken = (erc721Address: string) => {\r\n  const [isLoading, setIsLoading] = useState<any>(false)\r\n  const [isTransferred, setTransferred] = useState<any>(false)\r\n\r\n  const { account } = useWeb3React()\r\n  const nftTokenContract = useERC721(erc721Address)\r\n\r\n  const transferToken = useCallback(\r\n    async (from: string, to: string, tokenId: string) => {\r\n      try {\r\n        setIsLoading(true)\r\n        const tx = await nftTokenContract.methods.safeTransferFrom(from, to, tokenId).send({ from: account })\r\n        setIsLoading(false)\r\n        if (tx) {\r\n          setTransferred(true)\r\n        }\r\n        return tx\r\n      } catch (e) {\r\n        setIsLoading(false)\r\n        return false\r\n      }\r\n    },\r\n    [nftTokenContract, account],\r\n  )\r\n\r\n  return [isLoading, isTransferred, transferToken]\r\n}\r\n\r\nexport const useNormalTransferToken = (erc721Address: string) => {\r\n  const [isLoading, setIsLoading] = useState<any>(false)\r\n  const [isTransferred, setTransferred] = useState<any>(false)\r\n\r\n  const { account } = useWeb3React()\r\n  const nftTokenContract = useERC721(erc721Address)\r\n\r\n  const transferToken = useCallback(\r\n    async (from: string, to: string, tokenId: string) => {\r\n      try {\r\n        setIsLoading(true)\r\n        const tx = await nftTokenContract.methods.transferFrom(from, to, tokenId).send({ from: account })\r\n        setIsLoading(false)\r\n        if (tx) {\r\n          setTransferred(true)\r\n        }\r\n        return tx\r\n      } catch (e) {\r\n        setIsLoading(false)\r\n        return false\r\n      }\r\n    },\r\n    [nftTokenContract, account],\r\n  )\r\n\r\n  return [isLoading, isTransferred, transferToken]\r\n}\r\n"],"sourceRoot":""}