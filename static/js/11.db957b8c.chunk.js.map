{"version":3,"sources":["hooks/api.ts","components/Marketplace/CategoryTab/index.tsx","components/Marketplace/Sidebar/Traits/Select/Select.tsx","components/Marketplace/Sidebar/Traits/Option/Option.tsx","components/Marketplace/Sidebar/Traits/Traits.tsx","components/Marketplace/SortButtons/index.tsx","components/Marketplace/CustomImg/CustomImg.tsx","components/Marketplace/NftCard/index.tsx","components/Marketplace/NftList/index.tsx","components/Marketplace/CustomImg/CustomImg.module.css"],"names":["useCollections","useState","data","setData","useEffect","a","marketplaceClient","query","getERC721CollectionsQuery","variables","fetchPolicy","res","GetERC721Collections","console","error","fetchData","useCollection","alias","getERC721CollectionQuery","GetERC721Collection","length","useCollectionAttributes","getERC721CollectionAttributesQuery","GetERC721CollectionAttributes","currentInput1","useERC721TokenCount","input","getERC721TokenCountQuery","GetERC721TokenCount","pageSize","filters","JSON","stringify","currentInput2","useERC721Tokens","getERC721TokensQuery","GetERC721Tokens","currentInput3","useERC721RecentEventsLite","ERC721RecentEventsLiteQuery","ERC721RecentEventsLite","chainId","tokenAddress","useERC721Token","tokenId","getERC721TokenQuery","GetERC721Token","currentInput4","useERC721TokenEvents","ERC721TokenEventsQuery","ERC721TokenEvents","CategoryTabContainer","styled","div","theme","colors","card","text","CategoryTab","onActivityListing","button","setButton","title","map","e","index","className","onClick","role","Select","select","isChecked","onChange","Box","sx","display","justifyContent","alignItems","mb","xs","gap","Checkbox","checked","Typography","fontSize","fontWeight","color","label","textAlign","amount","percentage","Option","options","traitFilter","onChangeTraits","traits","setTraits","indexes","setIndexes","option","i","maxHeight","includes","overflow","filter","sort","b","findIndex","t","values","v","optionItem","traitIndex","type","push","attributeIndex","splice","handleChange","target","Button","disableElevation","borderRadius","paddingY","md","paddingX","boxShadow","width","_i","indexOf","TraitButtonWrap","props","textDisabled","TraitListWrap","background","TemporaryDrawer","collectionInfo","attributeInfo","top","left","bottom","right","state","setState","setOptions","attributeCategories","_options","totalSupply","attr","value","count","BigNumber","times","dp","toString","anchor","toggleDrawer","open","event","key","ListItem","style","padding","cursor","src","alt","ListItemText","primary","Drawer","transitionDuration","enter","exit","onClose","PaperProps","position","my","mx","maxWidth","onKeyDown","Divider","py","variant","SortButtonsContainer","SortButtons","tabType","onSort","sorts","setSorts","sortType","setSortType","CustomImg","imgRef","useRef","loaded","setLoaded","onLoad","current","complete","styles","imgContent","CircularProgress","height","marginRight","ref","nftImg","join","NftCardWrap","StyledCard","Card","MarketCard","tokenHighestBids","latestSoldTokens","token","tokenListing","isMyNFT","to","CardActionArea","pt","thumbnailCdnUrl","CardContent","flexGrow","name","rarityRank","pb","find","isZero","valueNum","NftListContainer","_tokens","NftList","isToggle","page","tokensInfo","totalCount","loadMore","onMyNftToggle","setIsMyNFT","tokens","setTokens","_t","pageStart","hasMore","loader","Grid","container","spacing","item","sm","lg","xl","NftCard","module","exports"],"mappings":"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","file":"static/js/11.db957b8c.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport { marketplaceClient } from '../apollo/client'\r\nimport {\r\n  // factoryQuery,\r\n  // tokensQuery,\r\n  getERC721CollectionsQuery,\r\n  getERC721CollectionQuery,\r\n  getERC721CollectionAttributesQuery,\r\n  getERC721TokenCountQuery,\r\n  getERC721TokensQuery,\r\n  ERC721RecentEventsLiteQuery,\r\n  getERC721TokenQuery,\r\n  ERC721TokenEventsQuery,\r\n} from '../apollo/queries'\r\n\r\n/* eslint-disable camelcase */\r\n\r\nexport interface TradePair {\r\n  swap_pair_contract: string\r\n  base_symbol: string\r\n  quote_symbol: string\r\n  last_price: number\r\n  base_volume_24_h: number\r\n  quote_volume_24_h: number\r\n}\r\n\r\nexport interface ApiStatResponse {\r\n  update_at: string\r\n  '24h_total_volume': number\r\n  total_value_locked: number\r\n  total_value_locked_all: number\r\n  trade_pairs: {\r\n    [key: string]: TradePair\r\n  }\r\n}\r\n\r\nexport const useGetStats = () => {\r\n  const [data /* setData */] = useState<ApiStatResponse | null>(null)\r\n\r\n  // useEffect(() => {\r\n  //   const fetchData = async () => {\r\n  //     try {\r\n  //       const result = await bowClient.query({\r\n  //         query: factoryQuery,\r\n  //         variables: {},\r\n  //         fetchPolicy: 'no-cache',\r\n  //       })\r\n\r\n  //       if (result?.data) {\r\n  //         let pairTVL = 0\r\n  //         result.data.uniswapFactories.map((factory) => {\r\n  //           pairTVL += parseFloat(factory.totalLiquidityUSD)\r\n  //           return pairTVL\r\n  //         })\r\n\r\n  //         const responsedata: ApiStatResponse = {\r\n  //           update_at: '',\r\n  //           '24h_total_volume': 0,\r\n  //           total_value_locked: 0,\r\n  //           total_value_locked_all: pairTVL,\r\n  //           trade_pairs: null,\r\n  //         }\r\n  //         setData(responsedata)\r\n  //       }\r\n  //     } catch (error) {\r\n  //       console.error('Unable to fetch data:', error)\r\n  //     }\r\n  //   }\r\n\r\n  //   fetchData()\r\n  // }, [setData])\r\n\r\n  return data\r\n}\r\n\r\nexport const useTokensData = () => {\r\n  const [data] = useState<ApiStatResponse | 0>(0)\r\n\r\n  // useEffect(() => {\r\n  //   const fetchData = async () => {\r\n  //     try {\r\n  //       const result = await bowClient.query({\r\n  //         query: tokensQuery,\r\n  //         variables: {},\r\n  //         fetchPolicy: 'no-cache',\r\n  //       })\r\n  //       setData(result?.data?.tokens.length)\r\n  //     } catch (error) {\r\n  //       console.error('Unable to fetch data:', error)\r\n  //     }\r\n  //   }\r\n\r\n  //   fetchData()\r\n  // }, [setData])\r\n\r\n  return data\r\n}\r\n\r\n// Marketplace GraphQL\r\n\r\nexport const useCollections = () => {\r\n  const [data, setData] = useState([])\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const { data: res } = await marketplaceClient.query({\r\n          query: getERC721CollectionsQuery,\r\n          variables: {},\r\n          fetchPolicy: 'no-cache',\r\n        })\r\n        setData(res.GetERC721Collections || [])\r\n      } catch (error) {\r\n        console.error('Unable to fetch data:', error)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [setData])\r\n\r\n  return data\r\n}\r\n\r\nexport const useCollection = (alias: string) => {\r\n  const [data, setData] = useState({})\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const { data: res }: any = await marketplaceClient.query({\r\n          query: getERC721CollectionQuery(alias),\r\n          variables: {},\r\n          fetchPolicy: 'no-cache',\r\n        })\r\n        if (res.GetERC721Collection && res.GetERC721Collection.length !== 0) {\r\n          setData(res.GetERC721Collection[0])\r\n        }\r\n      } catch (error) {\r\n        console.error('Unable to fetch data:', error)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [alias])\r\n\r\n  return data\r\n}\r\n\r\nexport const useCollectionAttributes = (alias: string) => {\r\n  const [data, setData] = useState({})\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const { data: res }: any = await marketplaceClient.query({\r\n          query: getERC721CollectionAttributesQuery(alias),\r\n          variables: {},\r\n          fetchPolicy: 'no-cache',\r\n        })\r\n        if (res.GetERC721CollectionAttributes) {\r\n          setData(res.GetERC721CollectionAttributes)\r\n        }\r\n      } catch (error) {\r\n        console.error('Unable to fetch data:', error)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [alias])\r\n\r\n  return data\r\n}\r\n\r\nlet currentInput1 = {}\r\nexport const useERC721TokenCount = (input: any) => {\r\n  const [data, setData] = useState({})\r\n\r\n  useEffect(() => {\r\n    currentInput1 = {}\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const { data: res }: any = await marketplaceClient.query({\r\n          query: getERC721TokenCountQuery,\r\n          variables: { input },\r\n          fetchPolicy: 'no-cache',\r\n        })\r\n        if (res.GetERC721TokenCount) {\r\n          setData(res.GetERC721TokenCount)\r\n        }\r\n      } catch (error) {\r\n        console.error('Unable to fetch data:', error)\r\n      }\r\n    }\r\n    if (input.pageSize && input.filters && JSON.stringify(input) !== JSON.stringify(currentInput1)) {\r\n      currentInput1 = input\r\n      fetchData()\r\n    }\r\n  }, [input])\r\n\r\n  return data\r\n}\r\n\r\nlet currentInput2 = {}\r\nexport const useERC721Tokens = (input: any) => {\r\n  const [data, setData] = useState({})\r\n\r\n  useEffect(() => {\r\n    currentInput2 = {}\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const { data: res }: any = await marketplaceClient.query({\r\n          query: getERC721TokensQuery,\r\n          variables: { input },\r\n          fetchPolicy: 'no-cache',\r\n        })\r\n        if (res.GetERC721Tokens) {\r\n          setData(res.GetERC721Tokens)\r\n        }\r\n      } catch (error) {\r\n        console.error('Unable to fetch data:', error)\r\n      }\r\n    }\r\n    if (JSON.stringify(input) !== JSON.stringify(currentInput2)) {\r\n      currentInput2 = input\r\n      fetchData()\r\n    }\r\n  }, [input])\r\n\r\n  return data\r\n}\r\n\r\nlet currentInput3 = {}\r\nexport const useERC721RecentEventsLite = (input: any) => {\r\n  const [data, setData] = useState([])\r\n\r\n  useEffect(() => {\r\n    currentInput3 = {}\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const { data: res }: any = await marketplaceClient.query({\r\n          query: ERC721RecentEventsLiteQuery,\r\n          variables: { input },\r\n          fetchPolicy: 'no-cache',\r\n        })\r\n        if (res.ERC721RecentEventsLite) {\r\n          setData(res.ERC721RecentEventsLite)\r\n        }\r\n      } catch (error) {\r\n        console.error('Unable to fetch data:', error)\r\n      }\r\n    }\r\n    if (input.chainId && input.tokenAddress && JSON.stringify(input) !== JSON.stringify(currentInput3)) {\r\n      currentInput3 = input\r\n      fetchData()\r\n    }\r\n  }, [input])\r\n\r\n  return data\r\n}\r\n\r\nexport const useERC721Token = (alias: string, tokenId: string) => {\r\n  const [data, setData] = useState({})\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const { data: res }: any = await marketplaceClient.query({\r\n          query: getERC721TokenQuery(alias, tokenId),\r\n          variables: {},\r\n          fetchPolicy: 'no-cache',\r\n        })\r\n        if (res.GetERC721Token) {\r\n          setData(res.GetERC721Token)\r\n        }\r\n      } catch (error) {\r\n        console.error('Unable to fetch data:', error)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [alias, tokenId])\r\n\r\n  return data\r\n}\r\n\r\nlet currentInput4 = {}\r\nexport const useERC721TokenEvents = (input: any) => {\r\n  const [data, setData] = useState([])\r\n\r\n  useEffect(() => {\r\n    currentInput4 = {}\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const { data: res }: any = await marketplaceClient.query({\r\n          query: ERC721TokenEventsQuery,\r\n          variables: { input },\r\n          fetchPolicy: 'no-cache',\r\n        })\r\n        if (res.ERC721TokenEvents) {\r\n          setData(res.ERC721TokenEvents)\r\n        }\r\n      } catch (error) {\r\n        console.error('Unable to fetch data:', error)\r\n      }\r\n    }\r\n    if (input.chainId && input.tokenAddress && JSON.stringify(input) !== JSON.stringify(currentInput4)) {\r\n      currentInput4 = input\r\n      fetchData()\r\n    }\r\n  }, [input])\r\n\r\n  return data\r\n}\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst CategoryTabContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 60px;\r\n  border-top: 1px solid #f0f0f0;\r\n  background: ${({ theme }) => theme.colors.card};\r\n\r\n  .tab-item {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 120px;\r\n    height: 100%;\r\n    font-weight: 500;\r\n    font-size: 16px;\r\n    color: ${({ theme }) => theme.colors.text};\r\n    cursor: pointer;\r\n\r\n    @media (max-width: 768px) {\r\n      width: 60px;\r\n      font-size: 14px;\r\n    }\r\n\r\n    &:not(:last-child) {\r\n      margin-right: 40px;\r\n      @media (max-width: 768px) {\r\n        margin-right: 12px;\r\n      }\r\n    }\r\n  }\r\n\r\n  .active-tab {\r\n    color: ${({ theme }) => theme.colors.text};\r\n    border-bottom: 4px solid #3960c1;\r\n  }\r\n`\r\nconst CategoryTab = ({ onActivityListing }: any) => {\r\n  const [button, setButton] = useState(0)\r\n  const buttons = [\r\n    {\r\n      title: 'All',\r\n    },\r\n    {\r\n      title: 'Listing',\r\n    },\r\n    {\r\n      title: 'Offers',\r\n    },\r\n    {\r\n      title: 'Sold',\r\n    },\r\n  ]\r\n\r\n  return (\r\n    <CategoryTabContainer>\r\n      {buttons.map((e, index) => {\r\n        return (\r\n          <div\r\n            key={e.title}\r\n            className={`tab-item ${index === button ? 'active-tab' : ''}`}\r\n            onClick={() => {\r\n              setButton(index)\r\n              onActivityListing(e.title)\r\n            }}\r\n            role=\"presentation\"\r\n          >\r\n            {e.title}\r\n          </div>\r\n        )\r\n      })}\r\n    </CategoryTabContainer>\r\n  )\r\n}\r\n\r\nexport default CategoryTab\r\n","import React from 'react'\r\nimport Box from '@mui/material/Box'\r\nimport Typography from '@mui/material/Typography'\r\nimport Checkbox from '@mui/material/Checkbox'\r\n\r\nconst Select = ({ select, isChecked, onChange }: any) => {\r\n  return (\r\n    <>\r\n      <Box\r\n        sx={{\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n          alignItems: 'center',\r\n          mb: { xs: '10px' },\r\n        }}\r\n      >\r\n        <Box\r\n          sx={{\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'center',\r\n            gap: '16px',\r\n          }}\r\n        >\r\n          <Checkbox checked={isChecked} onClick={onChange} />\r\n          <Typography\r\n            sx={{\r\n              fontSize: '18px',\r\n              fontWeight: 400,\r\n              color: 'rgba(51, 51, 51, 1)',\r\n            }}\r\n          >\r\n            {select.label || 'None'}\r\n          </Typography>\r\n        </Box>\r\n        <Box sx={{ textAlign: 'right' }}>\r\n          <Typography\r\n            sx={{\r\n              fontSize: '14px',\r\n              fontWeight: 400,\r\n              color: 'rgba(51, 51, 51, 1)',\r\n            }}\r\n          >\r\n            {select.amount}\r\n          </Typography>\r\n          <Typography\r\n            sx={{\r\n              fontSize: '12px',\r\n              fontWeight: 400,\r\n              color: 'rgba(133, 133, 133, 1)',\r\n            }}\r\n          >\r\n            {select.percentage}%\r\n          </Typography>\r\n        </Box>\r\n      </Box>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Select\r\n","import React, { useState, useEffect } from 'react'\r\nimport Box from '@mui/material/Box'\r\nimport Typography from '@mui/material/Typography'\r\nimport Button from '@mui/material/Button'\r\n\r\nimport Select from '../Select/Select'\r\n\r\nconst Option = ({ options, traitFilter, onChangeTraits }: any) => {\r\n  const [traits, setTraits] = useState<any>(traitFilter)\r\n  const [indexes, setIndexes] = useState<any>([])\r\n\r\n  useEffect(() => {\r\n    setTraits(traitFilter)\r\n  }, [traitFilter])\r\n\r\n  const handleChange = (isChecked: any, option: any, optionItem: any) => {\r\n    const traitIndex = traits.findIndex((t: any) => t.type === option.label)\r\n    if (traitIndex === -1 && isChecked) {\r\n      traits.push({\r\n        type: option.label,\r\n        values: [optionItem.label],\r\n      })\r\n    }\r\n\r\n    if (traitIndex > -1) {\r\n      const attributeIndex = traits[traitIndex].values.findIndex((a: any) => a === optionItem.label)\r\n      if (attributeIndex === -1 && isChecked) {\r\n        traits[traitIndex].values.push(optionItem.label)\r\n      }\r\n      if (attributeIndex > -1 && !isChecked) {\r\n        traits[traitIndex].values.splice(attributeIndex, 1)\r\n        if (traits[traitIndex].values.length === 0) {\r\n          traits.splice(traitIndex, 1)\r\n        }\r\n      }\r\n    }\r\n    setTraits([...traits])\r\n    onChangeTraits(traits)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {options.map((option: any, i: any) => {\r\n        return (\r\n          <Box sx={{ mb: '24px' }} key={option.label}>\r\n            <Typography\r\n              sx={{\r\n                fontWeight: 600,\r\n                fontSize: '16px',\r\n                color: '#1D123F',\r\n                mb: '10px',\r\n              }}\r\n            >\r\n              {option.label}\r\n            </Typography>\r\n            <Box\r\n              sx={{\r\n                maxHeight: indexes.includes(i) ? '100%' : '250px',\r\n                overflow: 'hidden',\r\n              }}\r\n            >\r\n              {option.select\r\n                .filter((select: any) => select.amount)\r\n                .sort((a: any, b: any) => {\r\n                  if (a.label < b.label) {\r\n                    return -1\r\n                  }\r\n                  if (a.label > b.label) {\r\n                    return 1\r\n                  }\r\n                  return 0\r\n                })\r\n                .map((select: any) => {\r\n                  return (\r\n                    <Select\r\n                      select={select}\r\n                      isChecked={\r\n                        traits.findIndex((t: any) => t.values.findIndex((a: any) => a === select.label) !== -1) !== -1\r\n                      }\r\n                      key={select.label}\r\n                      onChange={(v: any) => handleChange(v.target.checked, option, select)}\r\n                    />\r\n                  )\r\n                })}\r\n            </Box>\r\n            {option.select.length >= 5 && (\r\n              <>\r\n                {indexes.includes(i) ? (\r\n                  <Button\r\n                    disableElevation\r\n                    sx={{\r\n                      borderRadius: '12px',\r\n                      paddingY: { xs: '8px', md: '12.5px' },\r\n                      paddingX: '24px',\r\n                      boxShadow: 'none',\r\n                      width: '100%',\r\n                      color: '#1976d2',\r\n                    }}\r\n                    onClick={() => {\r\n                      const _i: any = indexes.indexOf(i)\r\n                      if (_i > -1) {\r\n                        indexes.splice(_i, 1)\r\n                        setIndexes([...indexes])\r\n                      }\r\n                    }}\r\n                  >\r\n                    Show Less\r\n                  </Button>\r\n                ) : (\r\n                  <Button\r\n                    disableElevation\r\n                    sx={{\r\n                      borderRadius: '12px',\r\n                      paddingY: { xs: '8px', md: '12.5px' },\r\n                      paddingX: '24px',\r\n                      boxShadow: 'none',\r\n                      width: '100%',\r\n                      color: '#1976d2',\r\n                    }}\r\n                    onClick={() => {\r\n                      if (!indexes.includes(i)) {\r\n                        indexes.push(i)\r\n                        setIndexes([...indexes])\r\n                      }\r\n                    }}\r\n                  >\r\n                    Show All\r\n                  </Button>\r\n                )}\r\n              </>\r\n            )}\r\n          </Box>\r\n        )\r\n      })}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Option\r\n","import React, { useState, useEffect } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport Box from '@mui/material/Box'\r\nimport Drawer from '@mui/material/Drawer'\r\nimport Typography from '@mui/material/Typography'\r\nimport Divider from '@mui/material/Divider'\r\nimport ListItem from '@mui/material/ListItem'\r\nimport ListItemText from '@mui/material/ListItemText'\r\nimport Button from '@mui/material/Button'\r\n\r\nimport Option from './Option/Option'\r\n\r\ntype Anchor = 'top' | 'left' | 'bottom' | 'right'\r\n\r\nconst TraitButtonWrap = styled.div`\r\n  border: 1px solid ${(props) => props.theme.colors.textDisabled};\r\n  border-radius: 24px;\r\n  background: ${({ theme }) => theme.colors.card};\r\n  color: ${({ theme }) => theme.colors.text};\r\n`\r\n\r\nconst TraitListWrap = styled(Box)`\r\n  span,\r\n  p,\r\n  div {\r\n    color: ${({ theme }) => theme.colors.text};\r\n  }\r\n\r\n  .bottom-btn-wrap {\r\n    background: ${({ theme }) => theme.colors.background};\r\n  }\r\n`\r\n\r\nexport default function TemporaryDrawer({ collectionInfo, attributeInfo, traitFilter, onChangeTraits }: any) {\r\n  const [state, setState] = useState({\r\n    top: false,\r\n    left: false,\r\n    bottom: false,\r\n    right: false,\r\n  })\r\n  const [options, setOptions] = useState([])\r\n\r\n  useEffect(() => {\r\n    if (collectionInfo && attributeInfo && attributeInfo.attributeCategories) {\r\n      const _options: any = []\r\n      const { totalSupply } = collectionInfo\r\n      attributeInfo.attributeCategories.map((attr: any) => {\r\n        _options.push({\r\n          label: attr.type,\r\n          select: [\r\n            ...attr.values.map((v: any) => ({\r\n              label: v.value,\r\n              amount: v.count,\r\n              percentage: new BigNumber(v.count).div(totalSupply).times(100).dp(2, 1).toString(),\r\n            })),\r\n          ],\r\n        })\r\n        return true\r\n      })\r\n      setOptions(_options)\r\n    }\r\n  }, [collectionInfo, attributeInfo])\r\n\r\n  const toggleDrawer = (anchor: Anchor, open: boolean) => (event: React.KeyboardEvent | React.MouseEvent) => {\r\n    if (\r\n      event.type === 'keydown' &&\r\n      ((event as React.KeyboardEvent).key === 'Tab' || (event as React.KeyboardEvent).key === 'Shift')\r\n    ) {\r\n      return\r\n    }\r\n\r\n    setState({ ...state, [anchor]: open })\r\n  }\r\n\r\n  const list = (anchor: Anchor) => (\r\n    <TraitListWrap\r\n      sx={{\r\n        width: {\r\n          xs: '100%',\r\n          md: anchor === 'top' || anchor === 'bottom' ? 'auto' : 600,\r\n        },\r\n\r\n        gap: '16px',\r\n        position: 'relative',\r\n      }}\r\n      role=\"presentation\"\r\n    >\r\n      <Box\r\n        sx={{\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'space-between',\r\n          my: '18px',\r\n          mx: '32px',\r\n        }}\r\n      >\r\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: '16px' }}>\r\n          <Box sx={{ maxWidth: '40px', display: 'flex', alignItems: 'center' }}>\r\n            <img src=\"/images/nfts/marketplace/traits.svg\" alt=\"traits\" />\r\n          </Box>\r\n          <Typography sx={{ fontSize: '28px', fontWeight: '600', color: '#3960C1' }}>Traits</Typography>\r\n        </Box>\r\n        <Box onClick={toggleDrawer(anchor, false)} onKeyDown={toggleDrawer(anchor, false)} sx={{ cursor: 'pointer' }}>\r\n          <img src=\"/images/nfts/marketplace/close.svg\" alt=\"close\" />\r\n        </Box>\r\n      </Box>\r\n      <Divider sx={{ mb: '24px' }} />\r\n      <Box\r\n        sx={{\r\n          width: '90%',\r\n          mx: 'auto',\r\n        }}\r\n      >\r\n        <Option options={options} traitFilter={traitFilter} onChangeTraits={onChangeTraits} />\r\n      </Box>\r\n      <Box\r\n        className=\"bottom-btn-wrap\"\r\n        sx={{\r\n          position: 'sticky',\r\n          bottom: 0,\r\n          py: '15px',\r\n        }}\r\n      >\r\n        <Box\r\n          sx={{\r\n            width: '80%',\r\n            mx: 'auto',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            gap: '24px',\r\n          }}\r\n        >\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disableElevation\r\n            sx={{\r\n              borderRadius: '12px',\r\n              paddingY: { xs: '8px', md: '12.5px' },\r\n              paddingX: '24px',\r\n              boxShadow: 'none',\r\n              width: '100%',\r\n              background: '#2a4aa6',\r\n            }}\r\n            onClick={() => {\r\n              onChangeTraits([])\r\n            }}\r\n          >\r\n            Clear all filters\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disableElevation\r\n            sx={{\r\n              borderRadius: '12px',\r\n              paddingY: { xs: '8px', md: '12.5px' },\r\n              paddingX: '24px',\r\n              boxShadow: 'none',\r\n              width: '100%',\r\n              background: '#2a4aa6',\r\n            }}\r\n            onClick={toggleDrawer(anchor, false)}\r\n          >\r\n            Done\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n    </TraitListWrap>\r\n  )\r\n\r\n  return (\r\n    <TraitButtonWrap>\r\n      {['Traits'].map((text) => (\r\n        <ListItem\r\n          onClick={toggleDrawer('right', true)}\r\n          button\r\n          key={text}\r\n          style={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            padding: '6px 24px',\r\n            fontWeight: 500,\r\n            fontSize: 14,\r\n            borderRadius: 24,\r\n            cursor: 'pointer',\r\n          }}\r\n        >\r\n          <img src=\"/images/nfts/marketplace/traits.svg\" alt=\"traits\" />\r\n          <ListItemText primary={text} />\r\n        </ListItem>\r\n      ))}\r\n      <Drawer\r\n        transitionDuration={{ enter: 400, exit: 400 }}\r\n        anchor=\"right\"\r\n        open={state.right}\r\n        onClose={toggleDrawer('right', false)}\r\n        PaperProps={{ sx: { width: { xs: '100%', md: 'auto' } } }}\r\n      >\r\n        {list('right')}\r\n      </Drawer>\r\n    </TraitButtonWrap>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport Traits from 'components/Marketplace/Sidebar/Traits/Traits'\r\n\r\nconst SortButtonsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  background: ${({ theme }) => theme.colors.card};\r\n  padding: 24px 85px;\r\n\r\n  @media (max-width: 768px) {\r\n    padding: 24px;\r\n    flex-direction: column;\r\n  }\r\n\r\n  .sort-wrap {\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    @media (max-width: 768px) {\r\n      flex-wrap: wrap;\r\n    }\r\n\r\n    .sort-by {\r\n      font-weight: 400;\r\n      font-size: 12px;\r\n      color: ${({ theme }) => theme.colors.text};\r\n      margin-right: 16px;\r\n\r\n      @media (max-width: 768px) {\r\n        display: none;\r\n      }\r\n    }\r\n\r\n    .sort-item {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      background: ${({ theme }) => theme.colors.card};\r\n      border: 1px solid ${(props) => props.theme.colors.textDisabled};\r\n      border-radius: 24px;\r\n      font-weight: 500;\r\n      font-size: 14px;\r\n      color: ${({ theme }) => theme.colors.text};\r\n      cursor: pointer;\r\n      padding: 6px 24px;\r\n      margin: 4px 8px;\r\n    }\r\n\r\n    .active-sort {\r\n      color: #3960c1;\r\n    }\r\n  }\r\n\r\n  .traits-btn {\r\n    @media (max-width: 768px) {\r\n      margin-top: 24px;\r\n    }\r\n    img {\r\n      margin-right: 12px;\r\n    }\r\n  }\r\n`\r\nconst SortButtons = ({ tabType, collectionInfo, attributeInfo, traitFilter, onSort, onChangeTraits }) => {\r\n  const [sorts, setSorts] = useState<any>([\r\n    { label: 'Token ID - Lowest', value: 'lowest' },\r\n    { label: 'Token ID - Highest', value: 'highest' },\r\n    { label: 'Rarity - Rare', value: 'rare' },\r\n    { label: 'Rarity - Common', value: 'common' },\r\n  ])\r\n  const [sortType, setSortType] = useState('')\r\n\r\n  useEffect(() => {\r\n    if (tabType === 'All') {\r\n      setSorts([\r\n        { label: 'Token ID - Lowest', value: 'lowest' },\r\n        { label: 'Token ID - Highest', value: 'highest' },\r\n        { label: 'Rarity - Rare', value: 'rare' },\r\n        { label: 'Rarity - Common', value: 'common' },\r\n      ])\r\n    } else if (tabType === 'Listing' || tabType === 'Offers') {\r\n      setSorts([\r\n        { label: 'Price - Lowest', value: 'price_lowest' },\r\n        { label: 'Price - Highest', value: 'price_highest' },\r\n        { label: 'Rarity - Rare', value: 'rare' },\r\n        { label: 'Rarity - Common', value: 'common' },\r\n      ])\r\n    } else if (tabType === 'Sold') {\r\n      setSorts([\r\n        { label: 'Sold - Latest', value: 'sold_latest' },\r\n        { label: 'Price - Lowest', value: 'price_lowest' },\r\n        { label: 'Price - Highest', value: 'price_highest' },\r\n        { label: 'Rarity - Rare', value: 'rare' },\r\n        { label: 'Rarity - Common', value: 'common' },\r\n      ])\r\n    }\r\n    setSortType('')\r\n  }, [tabType])\r\n\r\n  return (\r\n    <SortButtonsContainer>\r\n      <div className=\"sort-wrap\">\r\n        <div className=\"sort-by\">SORT BY</div>\r\n        {sorts.map((sort: any) => (\r\n          <div\r\n            key={sort.value}\r\n            className={`sort-item ${sortType === sort.value ? 'active-sort' : ''}`}\r\n            onClick={() => {\r\n              onSort(sort.value)\r\n              setSortType(sort.value)\r\n            }}\r\n            role=\"presentation\"\r\n          >\r\n            {sort.label}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"traits-btn\">\r\n        <Traits\r\n          collectionInfo={collectionInfo}\r\n          attributeInfo={attributeInfo}\r\n          traitFilter={traitFilter}\r\n          onChangeTraits={onChangeTraits}\r\n        />\r\n      </div>\r\n    </SortButtonsContainer>\r\n  )\r\n}\r\n\r\nexport default SortButtons\r\n","import React, { useRef, useState, useEffect } from 'react'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport styles from './CustomImg.module.css'\r\n\r\nexport default function CustomImg({ className = '', src = '' }) {\r\n  const imgRef = useRef<HTMLImageElement>(null)\r\n  const [loaded, setLoaded] = useState(false)\r\n\r\n  const onLoad = () => {\r\n    setLoaded(true)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (imgRef && imgRef.current?.complete) {\r\n      onLoad()\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div className={styles.imgContent}>\r\n      {!loaded && (\r\n        <CircularProgress\r\n          style={{\r\n            width: 20,\r\n            height: 20,\r\n            marginRight: 6,\r\n            color: 'red',\r\n          }}\r\n          color=\"secondary\"\r\n        />\r\n      )}\r\n      <img\r\n        ref={imgRef}\r\n        className={[styles.nftImg, className].join(' ')}\r\n        style={loaded ? {} : { display: 'none' }}\r\n        src={src}\r\n        onLoad={onLoad}\r\n        alt=\"nft\"\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport CardContent from '@mui/material/CardContent'\r\nimport Button from '@mui/material/Button'\r\nimport { CardActionArea } from '@mui/material'\r\nimport Typography from '@mui/material/Typography'\r\nimport Box from '@mui/material/Box'\r\nimport Card from '@mui/material/Card'\r\nimport Divider from '@mui/material/Divider'\r\nimport CustomImg from '../CustomImg/CustomImg'\r\n\r\nconst NftCardWrap = styled.div`\r\n  background: ${({ theme }) => theme.colors.card};\r\n\r\n  span,\r\n  a,\r\n  p {\r\n    color: ${({ theme }) => theme.colors.text};\r\n  }\r\n`\r\n\r\nconst StyledCard = styled(Card)`\r\n  background-color: ${({ theme }) => theme.colors.background} !important;\r\n  box-shadow: 0px 4px 10px rgba(105, 105, 105, 0.15);\r\n`\r\n\r\nconst MarketCard = ({\r\n  tabType = 'All',\r\n  tokenHighestBids = [],\r\n  latestSoldTokens = [],\r\n  collectionInfo,\r\n  token,\r\n  tokenListing,\r\n  isMyNFT,\r\n}: any) => {\r\n  return (\r\n    <NftCardWrap>\r\n      <Link to={`/marketplace/${collectionInfo.alias}/${token.tokenId}`}>\r\n        <StyledCard\r\n          sx={{\r\n            boxShadow: '0px 6px 20px rgba(67, 86, 134, 0.1)',\r\n          }}\r\n        >\r\n          <CardActionArea>\r\n            <Box\r\n              sx={{\r\n                position: 'relative',\r\n                width: '100%',\r\n                pt: '100%',\r\n              }}\r\n            >\r\n              <CustomImg src={token?.thumbnailCdnUrl || ''} />\r\n            </Box>\r\n\r\n            <CardContent sx={{ flexGrow: 1, py: '8px' }}>\r\n              <Typography mb=\"5px\" sx={{ fontSize: '12px', color: '#858585' }}>\r\n                Token ID #{token?.tokenId || ''}\r\n              </Typography>\r\n              <Typography mb=\"5px\" sx={{ fontSize: '16px', fontWeight: 'bold' }}>\r\n                {collectionInfo?.name || ''}\r\n              </Typography>\r\n              <Box\r\n                sx={{\r\n                  display: 'flex',\r\n                  justifyContent: 'space-between',\r\n                  alignItems: 'center',\r\n                }}\r\n              >\r\n                <Box\r\n                  sx={{\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    gap: '5px',\r\n                  }}\r\n                >\r\n                  <Typography sx={{ fontSize: '12px', color: '#666666' }}>Rarity rank</Typography>\r\n                </Box>\r\n                <Typography sx={{ fontSize: '12px', color: '#666666' }}># {token?.rarityRank || 0}</Typography>\r\n              </Box>\r\n            </CardContent>\r\n            <Divider />\r\n            {!isMyNFT ? (\r\n              <CardContent sx={{ flexGrow: 1, pt: '8px', pb: '5px' }}>\r\n                <Box\r\n                  sx={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center',\r\n                  }}\r\n                >\r\n                  <Typography sx={{ fontSize: '12px', color: '#666666' }}>\r\n                    {(tabType === 'All' || tabType === 'Listing') && 'Price'}\r\n                    {tabType === 'Offers' && 'Highest bid'}\r\n                    {tabType === 'Sold' && 'Last sell'}\r\n                  </Typography>\r\n                  <Box\r\n                    sx={{\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      gap: '5px',\r\n                    }}\r\n                  >\r\n                    {(tabType === 'All' || tabType === 'Listing') && (\r\n                      <Typography sx={{ fontSize: '14px', color: '#333333' }}>\r\n                        {new BigNumber(\r\n                          tokenListing.find((t: any) => t.tokenId.toString(10) === token.tokenId)?.value.toString(10) ||\r\n                            0,\r\n                        ).isZero()\r\n                          ? 'Not for sale'\r\n                          : new BigNumber(\r\n                              tokenListing\r\n                                .find((t: any) => t.tokenId.toString(10) === token.tokenId)\r\n                                ?.value.toString(10) || 0,\r\n                            )\r\n                              .div(10 ** 18)\r\n                              .toString(10)}\r\n                      </Typography>\r\n                    )}\r\n                    {tabType === 'Offers' && (\r\n                      <Typography sx={{ fontSize: '14px', color: '#333333' }}>\r\n                        {new BigNumber(\r\n                          tokenHighestBids\r\n                            .find((t: any) => t.tokenId.toString(10) === token.tokenId)\r\n                            ?.value.toString(10) || 0,\r\n                        )\r\n                          .div(10 ** 18)\r\n                          .toString(10)}\r\n                      </Typography>\r\n                    )}\r\n                    {tabType === 'Sold' && (\r\n                      <Typography sx={{ fontSize: '14px', color: '#333333' }}>\r\n                        {new BigNumber(\r\n                          latestSoldTokens.find((t: any) => t.tokenId.toString(10) === token.tokenId)?.valueNum || 0,\r\n                        ).toString(10)}\r\n                      </Typography>\r\n                    )}\r\n                  </Box>\r\n                </Box>\r\n              </CardContent>\r\n            ) : (\r\n              <Box\r\n                sx={{\r\n                  display: 'flex',\r\n                  justifyContent: 'space-around',\r\n                  mb: '5px',\r\n                }}\r\n              >\r\n                <Link to={`/marketplace/${collectionInfo.alias}/${token.tokenId}`}>\r\n                  <Button>List</Button>\r\n                </Link>\r\n                <Link to={`/marketplace/${collectionInfo.alias}/${token.tokenId}?transfer=Open`}>\r\n                  <Button>Transfer</Button>\r\n                </Link>\r\n              </Box>\r\n            )}\r\n          </CardActionArea>\r\n        </StyledCard>\r\n      </Link>\r\n    </NftCardWrap>\r\n  )\r\n}\r\n\r\nexport default MarketCard\r\n","import React, { useState, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport InfiniteScroll from 'react-infinite-scroller'\r\nimport Grid from '@mui/material/Grid'\r\nimport NftCard from 'components/Marketplace/NftCard'\r\n\r\nconst NftListContainer = styled.div`\r\n  background: ${({ theme }) => theme.colors.card};\r\n  padding: 0px 85px;\r\n\r\n  @media (max-width: 768px) {\r\n    padding: 0px 24px;\r\n  }\r\n\r\n  .list-header {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    margin-bottom: 30px;\r\n\r\n    .total-supply {\r\n      font-size: 14px;\r\n      font-weight: 500;\r\n      color: ${({ theme }) => theme.colors.text};\r\n    }\r\n\r\n    .my-nfts-toggle {\r\n      display: flex;\r\n      align-items: center;\r\n      font-size: 14px;\r\n      font-weight: 500;\r\n      color: ${({ theme }) => theme.colors.text};\r\n\r\n      .toggle-wrap {\r\n        display: flex;\r\n        align-items: center;\r\n        margin-left: 24px;\r\n        background: ${({ theme }) => theme.colors.card};\r\n        border-radius: 32px;\r\n\r\n        .toggle-item {\r\n          padding: 4px 23px;\r\n          border-radius: 32px;\r\n          font-size: 16px;\r\n          font-weight: 600;\r\n          color: ${({ theme }) => theme.colors.text};\r\n          cursor: pointer;\r\n        }\r\n\r\n        .toggle-active {\r\n          color: white;\r\n          background-color: #2a4aa6;\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\nlet _tokens = []\r\n\r\nconst NftList = ({\r\n  isToggle = true,\r\n  tabType,\r\n  page,\r\n  collectionInfo,\r\n  tokensInfo,\r\n  tokenListing,\r\n  tokenHighestBids = [],\r\n  latestSoldTokens = [],\r\n  totalCount,\r\n  loadMore,\r\n  onMyNftToggle,\r\n}: any) => {\r\n  const [isMyNFT, setIsMyNFT] = useState('off')\r\n  const [tokens, setTokens] = useState<any>([])\r\n\r\n  useEffect(() => {\r\n    if (page === 1) {\r\n      _tokens = []\r\n    }\r\n    const nftTokens = tokensInfo?.tokens || []\r\n    nftTokens.map((t: any) => {\r\n      if (_tokens.findIndex((_t: any) => _t.tokenId === t.tokenId) === -1) {\r\n        _tokens.push(t)\r\n      }\r\n      return true\r\n    })\r\n    setTokens(_tokens)\r\n  }, [page, tokensInfo])\r\n\r\n  return (\r\n    <NftListContainer>\r\n      <div className=\"list-header\">\r\n        <div className=\"total-supply\">{totalCount || 0} Results</div>\r\n        {isToggle && (\r\n          <div className=\"my-nfts-toggle\">\r\n            My NFTs\r\n            <div className=\"toggle-wrap\">\r\n              <div\r\n                className={`toggle-item ${isMyNFT === 'off' ? 'toggle-active' : ''}`}\r\n                onClick={() => {\r\n                  setIsMyNFT('off')\r\n                  onMyNftToggle('off')\r\n                }}\r\n                role=\"presentation\"\r\n              >\r\n                Off\r\n              </div>\r\n              <div\r\n                className={`toggle-item ${isMyNFT === 'on' ? 'toggle-active' : ''}`}\r\n                onClick={() => {\r\n                  setIsMyNFT('on')\r\n                  onMyNftToggle('on')\r\n                }}\r\n                role=\"presentation\"\r\n              >\r\n                On\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n      {totalCount ? (\r\n        <InfiniteScroll\r\n          pageStart={0}\r\n          loadMore={loadMore}\r\n          hasMore={tokens.length !== (totalCount || 0)}\r\n          loader={\r\n            <div className=\"nft-loader\" key={0}>\r\n              Loading ...\r\n            </div>\r\n          }\r\n        >\r\n          <Grid container spacing={4} sx={{ pb: 11 }}>\r\n            {tokens.map((token: any) => (\r\n              <Grid item key={token.tokenId} xs={12} sm={6} lg={3} xl={2.4}>\r\n                <NftCard\r\n                  tabType={tabType}\r\n                  tokenHighestBids={tokenHighestBids}\r\n                  latestSoldTokens={latestSoldTokens}\r\n                  collectionInfo={collectionInfo}\r\n                  token={token}\r\n                  tokenListing={tokenListing}\r\n                  isMyNFT={isMyNFT === 'on'}\r\n                />\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </InfiniteScroll>\r\n      ) : (\r\n        ''\r\n      )}\r\n    </NftListContainer>\r\n  )\r\n}\r\n\r\nexport default NftList\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imgContent\":\"CustomImg_imgContent__287ad\",\"nftImg\":\"CustomImg_nftImg__2jIC0\"};"],"sourceRoot":""}