{"version":3,"sources":["components/Marketplace/AnalyticHead/index.tsx","components/Marketplace/CollectionInfo/index.tsx","views/Marketplace/CollectionDetail.tsx"],"names":["AnalyticHeadContainer","styled","div","AnalyticHead","to","CollectionInfoContainer","theme","colors","card","InfoWrap","bow","text","primary","InfoDetail","CollectionInfo","collectionInfo","floor","onSearch","className","name","src","alt","href","address","rel","target","websiteUrl","totalSupply","totalVolume","placeholder","type","onChange","Background","CollectionHeader","props","sidebar","CollectionDetail","isDark","useTheme","useState","filters","traits","tokenCountInput","setTokenCountInput","traitFilter","setTraitFilter","tokenIds","setTokenIds","totalCount","setTotalCount","searchNumber","setSearchNumber","page","setPage","isShowMyNft","setIsShowMyNft","tabType","setTabType","sortType","setSortType","latestSoldTokens","setLatestSoldTokens","params","useParams","useCollection","alias","attributeInfo","useCollectionAttributes","tokenCountInfo","useERC721TokenCount","pageSize","tokensInfo","useERC721Tokens","soldTokens","useERC721RecentEventsLite","chainId","tokenAddress","events","limit","totalListingNum","useNumTokenListings","tokenListing","useTokenListings","myTokenIds","useGetMyTokenIds","useNumTokenWithBids","totalTokenBid","getTokenWithBids","useTokenHighestBids","tokenHighestBids","getTokenHighestBids","useEffect","BigNumber","sort","a","b","value","isGreaterThan","isLessThan","toString","tokens","filter","t","findIndex","tl","tokenId","_latestSoldToken","map","lt","push","timestamp","valueNum","includes","length","_tokenIds","_","idx","e","setTimeout","CategoryTab","onActivityListing","SortButtons","onSort","orderBy","direction","key","onChangeTraits","traitData","NftList","loadMore","onMyNftToggle","v"],"mappings":"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","file":"static/js/49.7f4af7c4.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button } from 'archerswap-uikit'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst AnalyticHeadContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  // a {\r\n  //   margin-right: 24px;\r\n  // }\r\n`\r\nconst AnalyticHead = () => {\r\n  return (\r\n    <AnalyticHeadContainer>\r\n      <Link to=\"/my-nfts\">\r\n        <Button>My NFTs</Button>\r\n      </Link>\r\n      {/* <ActivityBar />\r\n      <SearchBar /> */}\r\n    </AnalyticHeadContainer>\r\n  )\r\n}\r\n\r\nexport default AnalyticHead\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst CollectionInfoContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 42px 85px;\r\n  background: ${({ theme }) => theme.colors.card};\r\n\r\n  @media (max-width: 768px) {\r\n    flex-direction: column;\r\n    padding: 24px;\r\n  }\r\n`\r\n\r\nconst InfoWrap = styled.div`\r\n  .name {\r\n    font-size: 32px;\r\n    font-weight: 600;\r\n    color: ${({ theme }) => theme.colors.bow};\r\n    margin-bottom: 16px;\r\n  }\r\n\r\n  .description {\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    img {\r\n      margin-right: 16px;\r\n    }\r\n\r\n    .rarity-desc {\r\n      font-size: 14px;\r\n      font-weight: 400;\r\n      color: ${({ theme }) => theme.colors.text};\r\n      span {\r\n        font-weight: bold;\r\n        color: ${({ theme }) => theme.colors.text};\r\n      }\r\n    }\r\n  }\r\n\r\n  .link-wrap {\r\n    margin-top: 32px;\r\n    img {\r\n      width: 40px;\r\n      height: 40px;\r\n      background: ${({ theme }) => theme.colors.primary};\r\n      padding: 11px;\r\n      border-radius: 50%;\r\n      cursor: pointer;\r\n    }\r\n    a {\r\n      margin-right: 28px;\r\n    }\r\n  }\r\n`\r\n\r\nconst InfoDetail = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-end;\r\n\r\n  @media (max-width: 768px) {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    margin-top: 24px;\r\n  }\r\n\r\n  .summary-wrap {\r\n    display: flex;\r\n    align-items: center;\r\n    background: ${({ theme }) => theme.colors.card};\r\n    border: 0.5px solid #d7d9e0;\r\n    box-sizing: border-box;\r\n    border-radius: 16px;\r\n    padding: 20px 16px;\r\n    margin-bottom: 28px;\r\n\r\n    .summary-item {\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      margin: 0 29px;\r\n\r\n      .label {\r\n        font-size: 12px;\r\n        font-weight: 400;\r\n        color: ${({ theme }) => theme.colors.text};\r\n        margin-bottom: 4px;\r\n      }\r\n      .value {\r\n        font-size: 16px;\r\n        font-weight: 600;\r\n        color: ${({ theme }) => theme.colors.text};\r\n      }\r\n    }\r\n  }\r\n\r\n  .search-input-wrap {\r\n    max-width: 276px;\r\n    display: flex;\r\n    align-items: center;\r\n    background: ${({ theme }) => theme.colors.card};\r\n    border: 1px solid #d7d9e0;\r\n    box-sizing: border-box;\r\n    border-radius: 24px;\r\n    padding: 8px 16px;\r\n\r\n    input {\r\n      width: 100%;\r\n      font-weight: 400;\r\n      font-size: 14px;\r\n      background: ${({ theme }) => theme.colors.card};\r\n      color: ${({ theme }) => theme.colors.text};\r\n      border: none;\r\n      outline: none;\r\n      margin-left: 16px;\r\n    }\r\n  }\r\n`\r\n\r\nconst CollectionInfo = ({ collectionInfo, floor, onSearch }) => {\r\n  return (\r\n    <CollectionInfoContainer>\r\n      <InfoWrap>\r\n        <div className=\"name\">{collectionInfo?.name || ''}</div>\r\n        <div className=\"description\">\r\n          <img src=\"/images/nfts/marketplace/wifi.svg\" alt=\"mint\" />\r\n          <div className=\"rarity-desc\">\r\n            <span>Mint</span> - Rarity rank will change as minting&apos;s live\r\n          </div>\r\n        </div>\r\n        <div className=\"link-wrap\">\r\n          {/* <img src=\"/images/nfts/marketplace/analytic_white.svg\" alt=\"analytic\" /> */}\r\n          <a href={`https://scan.coredao.org/address/${collectionInfo?.address}`} rel=\"noreferrer\" target=\"_blank\">\r\n            <img src=\"/images/nfts/marketplace/scan.svg\" alt=\"scan\" />\r\n          </a>\r\n          <a href={collectionInfo.websiteUrl} rel=\"noreferrer\" target=\"_blank\">\r\n            <img src=\"/images/nfts/marketplace/global.svg\" alt=\"global\" />\r\n          </a>\r\n        </div>\r\n      </InfoWrap>\r\n      <InfoDetail>\r\n        <div className=\"summary-wrap\">\r\n          <div className=\"summary-item\">\r\n            <div className=\"label\">Items</div>\r\n            <div className=\"value\">{collectionInfo?.totalSupply || 0}</div>\r\n          </div>\r\n          <div className=\"summary-item\">\r\n            <div className=\"label\">Volume traded</div>\r\n            <div className=\"value\">{collectionInfo?.totalVolume || 0}</div>\r\n          </div>\r\n          <div className=\"summary-item\">\r\n            <div className=\"label\">Floor price</div>\r\n            <div className=\"value\">{floor} CORE</div>\r\n          </div>\r\n        </div>\r\n        <div className=\"search-input-wrap\">\r\n          <img src=\"/images/nfts/marketplace/search.svg\" alt=\"search\" />\r\n          <input placeholder=\"Mint number\" type=\"number\" onChange={onSearch} />\r\n        </div>\r\n      </InfoDetail>\r\n    </CollectionInfoContainer>\r\n  )\r\n}\r\n\r\nexport default CollectionInfo\r\n","/* eslint-disable no-nested-ternary */\r\nimport React, { useState, useEffect } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { Link, useParams } from 'react-router-dom'\r\nimport CollectionInfo from 'components/Marketplace/CollectionInfo'\r\nimport CategoryTab from 'components/Marketplace/CategoryTab'\r\nimport SortButtons from 'components/Marketplace/SortButtons'\r\nimport NftList from 'components/Marketplace/NftList'\r\nimport AnalyticHead from 'components/Marketplace/AnalyticHead'\r\nimport {\r\n  useCollection,\r\n  useCollectionAttributes,\r\n  useERC721TokenCount,\r\n  useERC721Tokens,\r\n  useERC721RecentEventsLite,\r\n} from 'hooks/api'\r\nimport {\r\n  useNumTokenListings,\r\n  useTokenListings,\r\n  useGetMyTokenIds,\r\n  useNumTokenWithBids,\r\n  useTokenHighestBids,\r\n} from 'hooks/useNftMarketplace'\r\n\r\nconst Background = styled.div<any>`\r\n  width: 100%;\r\n  min-height: calc(100vh - 64px);\r\n  background: ${({ theme }) => theme.colors.card};\r\n`\r\n\r\nconst CollectionHeader = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  width: 100%;\r\n  padding: 25px 85px;\r\n  background-color: ${(props) => props.theme.colors.sidebar};\r\n\r\n  @media (max-width: 768px) {\r\n    padding: 24px;\r\n  }\r\n\r\n  .back-wrap {\r\n    display: flex;\r\n    align-items: center;\r\n    img {\r\n      margin-right: 20px;\r\n    }\r\n    > div {\r\n      font-weight: 500;\r\n      font-size: 16px;\r\n      color: ${({ theme }) => theme.colors.text};\r\n    }\r\n  }\r\n`\r\n\r\nconst CollectionDetail: React.FC = () => {\r\n  const { isDark } = useTheme()\r\n  const [tokenCountInput, setTokenCountInput] = useState<any>({\r\n    filters: {\r\n      traits: [],\r\n    },\r\n  })\r\n  const [traitFilter, setTraitFilter] = useState<any>([])\r\n  const [tokenIds, setTokenIds] = useState([])\r\n  const [totalCount, setTotalCount] = useState(0)\r\n  const [searchNumber, setSearchNumber] = useState('')\r\n  const [page, setPage] = useState(1)\r\n  const [isShowMyNft, setIsShowMyNft] = useState('off')\r\n  const [tabType, setTabType] = useState('All')\r\n  const [sortType, setSortType] = useState('')\r\n  const [latestSoldTokens, setLatestSoldTokens] = useState([])\r\n\r\n  const params: any = useParams()\r\n\r\n  const collectionInfo: any = useCollection(params.alias)\r\n  const attributeInfo: any = useCollectionAttributes(params.alias)\r\n  const tokenCountInfo: any = useERC721TokenCount({\r\n    alias: params.alias,\r\n    ...tokenCountInput,\r\n    pageSize: collectionInfo?.totalSupply,\r\n  })\r\n\r\n  const tokensInfo: any = useERC721Tokens({\r\n    alias: params.alias,\r\n    filters: {\r\n      tokenIds,\r\n    },\r\n    // pageSize: collectionInfo?.totalSupply,\r\n  })\r\n\r\n  const soldTokens: any = useERC721RecentEventsLite(\r\n    tabType === 'Sold'\r\n      ? {\r\n          chainId: collectionInfo?.chainId,\r\n          tokenAddress: collectionInfo?.address,\r\n          events: ['TokenBought', 'TokenBidAccepted'],\r\n          limit: collectionInfo?.totalSupply,\r\n        }\r\n      : {},\r\n  )\r\n\r\n  const totalListingNum: any = useNumTokenListings(collectionInfo?.address)\r\n  const tokenListing: any = useTokenListings(collectionInfo?.address, totalListingNum)\r\n  const myTokenIds: any = useGetMyTokenIds(collectionInfo?.address, isShowMyNft)\r\n  const [totalTokenBid, getTokenWithBids]: any = useNumTokenWithBids()\r\n  const [tokenHighestBids, getTokenHighestBids]: any = useTokenHighestBids()\r\n\r\n  useEffect(() => {\r\n    setPage(1)\r\n  }, [params.alias])\r\n\r\n  useEffect(() => {\r\n    if (tabType === 'Offers') {\r\n      getTokenWithBids(collectionInfo?.address)\r\n    }\r\n  }, [tabType, collectionInfo, getTokenWithBids])\r\n\r\n  useEffect(() => {\r\n    if (tabType === 'Offers' && totalTokenBid) {\r\n      getTokenHighestBids(collectionInfo?.address, totalTokenBid)\r\n    }\r\n  }, [tabType, collectionInfo, totalTokenBid, getTokenHighestBids])\r\n\r\n  const floor = new BigNumber(\r\n    tokenListing\r\n      .sort((a: any, b: any) => {\r\n        if (new BigNumber(a.value).isGreaterThan(b.value)) {\r\n          return 1\r\n        }\r\n        if (new BigNumber(a.value).isLessThan(b.value)) {\r\n          return -1\r\n        }\r\n        return 0\r\n      })[0]\r\n      ?.value.toString(10) || 0,\r\n  )\r\n    .div(10 ** 18)\r\n    .toString()\r\n\r\n  useEffect(() => {\r\n    if (tokenCountInfo && tokenCountInfo.tokens) {\r\n      let tokens = []\r\n      if (tabType === 'All') {\r\n        // eslint-disable-next-line prefer-destructuring\r\n        tokens = tokenCountInfo.tokens\r\n      } else if (tabType === 'Listing') {\r\n        if (sortType === 'price_lowest' || sortType === 'price_highest') {\r\n          tokens = tokenListing\r\n            .filter(\r\n              (t: any) => tokenCountInfo.tokens.findIndex((tl: any) => tl.tokenId === t.tokenId.toString(10)) !== -1,\r\n            )\r\n            .sort((a: any, b: any) => {\r\n              if (sortType === 'price_lowest') {\r\n                if (new BigNumber(a.value).isLessThan(b.value)) {\r\n                  return -1\r\n                }\r\n                if (new BigNumber(a.value).isGreaterThan(b.value)) {\r\n                  return 1\r\n                }\r\n              } else if (sortType === 'price_highest') {\r\n                if (new BigNumber(b.value).isLessThan(a.value)) {\r\n                  return -1\r\n                }\r\n                if (new BigNumber(b.value).isGreaterThan(a.value)) {\r\n                  return 1\r\n                }\r\n              }\r\n              return 0\r\n            })\r\n        } else {\r\n          tokens = tokenCountInfo.tokens.filter(\r\n            (t: any) => tokenListing.findIndex((tl: any) => tl.tokenId.toString(10) === t.tokenId) !== -1,\r\n          )\r\n        }\r\n      } else if (tabType === 'Offers') {\r\n        if (sortType === 'price_lowest' || sortType === 'price_highest') {\r\n          tokens = tokenHighestBids\r\n            .filter((t: any) => tokenCountInfo.tokens.findIndex((tl: any) => tl.tokenId === t.tokenId) !== -1)\r\n            .sort((a: any, b: any) => {\r\n              if (sortType === 'price_lowest') {\r\n                if (new BigNumber(a.value).isLessThan(b.value)) {\r\n                  return -1\r\n                }\r\n                if (new BigNumber(a.value).isGreaterThan(b.value)) {\r\n                  return 1\r\n                }\r\n              } else if (sortType === 'price_highest') {\r\n                if (new BigNumber(b.value).isLessThan(a.value)) {\r\n                  return -1\r\n                }\r\n                if (new BigNumber(b.value).isGreaterThan(a.value)) {\r\n                  return 1\r\n                }\r\n              }\r\n              return 0\r\n            })\r\n        } else {\r\n          tokens = tokenCountInfo.tokens.filter(\r\n            (t: any) => tokenHighestBids.findIndex((tl: any) => tl.tokenId.toString(10) === t.tokenId) !== -1,\r\n          )\r\n        }\r\n      } else if (tabType === 'Sold') {\r\n        const _latestSoldToken: any = []\r\n        soldTokens.map((t: any) => {\r\n          if (_latestSoldToken.findIndex((lt: any) => lt.tokenId === t.tokenId) === -1) {\r\n            _latestSoldToken.push(t)\r\n          }\r\n          return true\r\n        })\r\n        setLatestSoldTokens(soldTokens)\r\n        if (sortType === 'sold_latest' || sortType === 'price_lowest' || sortType === 'price_highest') {\r\n          tokens = _latestSoldToken\r\n            .filter((t: any) => tokenCountInfo.tokens.findIndex((tl: any) => tl.tokenId === t.tokenId) !== -1)\r\n            .sort((a: any, b: any) => {\r\n              if (sortType === 'sold_latest') {\r\n                if (new BigNumber(b.timestamp).isLessThan(a.timestamp)) {\r\n                  return -1\r\n                }\r\n                if (new BigNumber(b.timestamp).isGreaterThan(a.timestamp)) {\r\n                  return 1\r\n                }\r\n              } else if (sortType === 'price_lowest') {\r\n                if (new BigNumber(a.valueNum).isLessThan(b.valueNum)) {\r\n                  return -1\r\n                }\r\n                if (new BigNumber(a.valueNum).isGreaterThan(b.valueNum)) {\r\n                  return 1\r\n                }\r\n              } else if (sortType === 'price_highest') {\r\n                if (new BigNumber(b.valueNum).isLessThan(a.valueNum)) {\r\n                  return -1\r\n                }\r\n                if (new BigNumber(b.valueNum).isGreaterThan(a.valueNum)) {\r\n                  return 1\r\n                }\r\n              }\r\n              return 0\r\n            })\r\n        } else {\r\n          tokens = tokenCountInfo.tokens.filter(\r\n            (t: any) => _latestSoldToken.findIndex((tl: any) => tl.tokenId === t.tokenId) !== -1,\r\n          )\r\n        }\r\n      }\r\n\r\n      if (isShowMyNft === 'on') {\r\n        tokens = tokens.filter((t: any) => myTokenIds.includes(t.tokenId))\r\n      }\r\n      setTotalCount(tokens.filter((t: any) => t.tokenId.includes(searchNumber)).length)\r\n      const _tokenIds = tokens\r\n        .filter((t: any) => t.tokenId.includes(searchNumber))\r\n        .filter((_: any, idx: any) => idx < page * 20 && idx >= (page - 1) * 20)\r\n        .map((t: any) => t.tokenId)\r\n\r\n      if (_tokenIds.length !== 0) {\r\n        setTokenIds(_tokenIds)\r\n      }\r\n    }\r\n  }, [\r\n    tabType,\r\n    sortType,\r\n    isShowMyNft,\r\n    myTokenIds,\r\n    page,\r\n    tokenCountInfo,\r\n    searchNumber,\r\n    tokenListing,\r\n    tokenHighestBids,\r\n    soldTokens,\r\n  ])\r\n\r\n  const handleSort = (sort: any) => {\r\n    setSortType(sort)\r\n    const orderBy: any = {}\r\n    if (sort === 'lowest') {\r\n      orderBy.direction = 'asc'\r\n      orderBy.key = 'tokenId'\r\n    } else if (sort === 'highest') {\r\n      orderBy.direction = 'desc'\r\n      orderBy.key = 'tokenId'\r\n    } else if (sort === 'rare') {\r\n      orderBy.direction = 'asc'\r\n      orderBy.key = 'rarityRank'\r\n    } else if (sort === 'common') {\r\n      orderBy.direction = 'desc'\r\n      orderBy.key = 'rarityRank'\r\n    }\r\n\r\n    setTokenCountInput({\r\n      ...tokenCountInput,\r\n      orderBy,\r\n    })\r\n\r\n    setPage(1)\r\n  }\r\n\r\n  const handleActivityListing = (type: any) => {\r\n    setTabType(type)\r\n    setPage(1)\r\n  }\r\n\r\n  const handleSearch = (e: any) => {\r\n    setTimeout(() => {\r\n      setPage(1)\r\n      setSearchNumber(e.target.value)\r\n    }, 1000)\r\n  }\r\n\r\n  const handleTraits = (traitData: any) => {\r\n    setTraitFilter(traitData)\r\n    setTokenCountInput({\r\n      ...tokenCountInput,\r\n      filters: {\r\n        ...tokenCountInput.filters,\r\n        traits: traitData,\r\n      },\r\n    })\r\n    setPage(1)\r\n  }\r\n\r\n  const handleLoadMore = () => {\r\n    if ((tokensInfo?.tokens || []).length !== 0) {\r\n      setTimeout(() => {\r\n        setPage(page + 1)\r\n      }, 1000)\r\n    }\r\n  }\r\n\r\n  const handleMyNftToggle = (v: string) => {\r\n    setIsShowMyNft(v)\r\n    setPage(1)\r\n  }\r\n\r\n  return (\r\n    <Background isDark={isDark}>\r\n      <CollectionHeader>\r\n        <Link to=\"/marketplace\">\r\n          <div className=\"back-wrap\">\r\n            <img src=\"/images/nfts/marketplace/back.svg\" alt=\"back\" />\r\n            <div>All Collections</div>\r\n          </div>\r\n        </Link>\r\n        <AnalyticHead />\r\n      </CollectionHeader>\r\n      <CollectionInfo collectionInfo={collectionInfo} floor={floor} onSearch={handleSearch} />\r\n      <CategoryTab onActivityListing={handleActivityListing} />\r\n      <SortButtons\r\n        tabType={tabType}\r\n        collectionInfo={collectionInfo}\r\n        attributeInfo={attributeInfo}\r\n        traitFilter={traitFilter}\r\n        onSort={handleSort}\r\n        onChangeTraits={handleTraits}\r\n      />\r\n      <NftList\r\n        tabType={tabType}\r\n        page={page}\r\n        collectionInfo={collectionInfo}\r\n        tokensInfo={tokensInfo}\r\n        tokenListing={tokenListing}\r\n        tokenHighestBids={tokenHighestBids}\r\n        latestSoldTokens={latestSoldTokens}\r\n        totalCount={totalCount}\r\n        loadMore={handleLoadMore}\r\n        onMyNftToggle={handleMyNftToggle}\r\n      />\r\n    </Background>\r\n  )\r\n}\r\n\r\nexport default CollectionDetail\r\n"],"sourceRoot":""}